
#====================================
#
# 初始化个人信息
#
# ====================================

git conf --global user.name "Jade-Shan"
git conf --global user.email "evokeralucard@gmail.com"



# ====================================
#
# 新建立一个工程
#
# ====================================

到一个新的工具目录下
cd workspace/wubi

初始化一个新的工程，会建立.git目录保存信息
git init

为当前项目建立快照（snapshot）的索引（index file）
git add .

提交修改
git commit

提交时会在编辑器里要求输入备注。
但是要注意第一行要少于50字，如果有第二行，一定要空白。



# ====================================
#
# 提交修改到项目目录
#
# ====================================

查看当前文件（work tree）和index file的区别
git diff

在提交这前，先把改动添加到index file
git add readme.txt

查看index file和版本库之间的差别
git diff --cached

查看文件和版本库之间的差别：
git diff HEAD

提交更新的内容到版本库
git commit

在检查修改内容的过程中，还可以查看当前工作的状态
git status
返回的信息中，不同的阶段：
	Change but not update：有一部分文件有修改，还没有index
	Changes to be update： 有一部分文件已经index，还没有commit
	Untracked files：有新增加的文件

查看提交的历史：
git log

加上参数-p可以显示详细日志信息，如提交的改动：
git log -p

可以省略比对和快照的过程，直接一次提交所有的变更。
但提交现有的文件，新文件还是要git add：
git commit -a



# ====================================
#
# 分支控制
#
# ====================================

显示所有的分支：
git branch

想要建一个新的叫experimenal的分支：
git branch experienal

切换到experimenal分支：
git checkout experimenal

使用checkou可以在多个分支上随意切换。
在一个分支上的操作不会影响到另一个分支。

合并版本：
要把experimenal合并到master，要先切到master：
git branch master

然后把experimenal合并过来：
git merge experimenal

可以通过图型界面查看分支过程：
gitk

合并成功了以后可以删除原来的experimenal：
git branch -d experimenal

可以用大写-D表示强制删除，通常在分支失败时用：
git branch -D experimenal



# ====================================
#
# 合作开发
#
# ====================================
因为还没有服务器这里是从每个人的目录中导入

#
# 合作者来一起开发
#
现在有另一个人工和我合作
mkdir wubi2

别人从我的版本库中导出：
git clone wubi wubi2

然后别人可以在我的代码基础上进行开发，然后提交：
git commit -a

#
# 我更新合作者的开发成果
#
回到我这边，我知道别人已经提交了
cd wubi

如果不放心别人的工作，就先把对方的代码拿来作为一个分支：
git fetch ../wubi2 master:otherone

比较一下别人改了哪些地方
git whatchanged -p master..otherone

如果认为对方改错了，可以删除掉对方的修改
git branch -D otherone

如果觉得没有问题了可以导入别人的修改。
当然如果信任对方的话，也可以不建立分支检查直接导入：
git pull ../wubi2 master


#
# 合作者继续开发
#
先要取得我的工作成果，可以直接pull不用加参数。
因为clone的时候已经记住了来源：
git pull


# ====================================
#
# 冲突处理
#
# ====================================
合作开发与合并分支都有可能发生冲突，看到如下错误信息：
Automatic merge failed; fix conflicts and then commit the result.

这个时候要手动排除冲突，源代码被会git修改。以“====”分隔冲突的两边。
修改完成了以后可以现次提交：
git commit -a

# ====================================
#
# 代码托管服务商GitHub
#
# ====================================

先要申请账号，建立自己的repo。

然后上传自己的ssh-key作为连接凭证。上传后检查是否能成功连接：
ssh -T git@github.com

如果失败，用debug方式检查一下是不是因为防火墙的原因：
ssh -vT git@github.com

还有一个失败的可能性是因为没有把私钥加上：
ssh-add ~/.ssh/id_rsa

验证可能成功连接后，把repo复制下来：
git clone git@github.com:Jade-Shan/Jade-Wubi.git

复制下来的第一次提交声明提交到来源：
git push origin master

以后的直接push就可以了：
git push

# ====================================
#
# 查看提交记录
#
# ====================================

查看提交的记录，每一次提交都有一个唯一的主键叫commit：
git log

可以通过commit的值查看当次提交的详细信息：
git show 1e193e9a7bf1699392c6bbe3d53d786b93e6570b

也可以指定查看分支的名字：
git show master
git show experimenal

查看本次提交的头信息：

每一次 commit 都会有”parent commit”,可以使用^表示 parent:
git show HEAD^  # 查看 HEAD 的父版本的信息 
git show HEAD^^ # 查看 HEAD 的父的父母的信息 
git show HEAD~4 # 查看 HEAD 上溯 4 代的信息

要注意的是 git-merge 是会产生双父版本的,这种情况这样处理:
git show HEAD^1 # 查看 HEAD 的第一个父代
git show HEAD^2 # 查看 HEAD 的第二个父代

可以用一个名字代替序列号：
git tag V1.0 c9d52de78c132f6ea420644c2b7e422b225d258f
git show V1.0
git branch stalbe V1.0 # 建立一个叫stalbe的分支

查找文本：
git grep "ibus"      # 在所有版本口查找
git grep "ibus" V1.0 # 在V3版本中查找

定位具体的历史记录

显示 V3 之后直至 V7 的所有历史记录
git log V3..V7 

显示所有 V3 之后的历史记录。
git log V3.. 

注意<since>..<until>中任何一个被省略都将被默认设置为 HEAD。
所以如果使用..<until>的话,git log 在大部分情况下会输出空的。

git log –since=”2 weeks ago”
显示 2 周前到现在的所有历史记录。
具体语法可查询git-ref-parse 命令的帮助文件。

将显示在 experimental分支
但不在 stable 分支的 历史记录
git log stable..experimental 

将显示在 stable 分支但不在 experimental 分支的历史记录
git log experimental..stable 

gitk也可以定位具体的历史记录
将在GUI中显示自2周前到现在为止的
且位于drivers目录下的分支记录信息：
gitk –since=”2 weeks ago” drivers/ 

