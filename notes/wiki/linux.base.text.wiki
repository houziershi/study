
%title 文本文件

%toc 文本文件

= 文本文件 =

== cat ==

添加行号：

{{{class="brush: bash"
$ cat -n grocery.list
 1 apples
 2 bananas
 3 plums
 4 carrots
}}}

== nl ==

nl 过滤器会从 stdin 或指定文件读取行。输出则会写入 stdout 并重定向到文件，或传到
另一个进程中。nl 的行为是由不同命令行选项控制的。

在默认情况下，nl 会计算行数，与`cat -n`的功能类似。

{{{class="brush: bash"
$nl grocery.list
 1 apples
 2 bananas
 3 plums
 4 carrots
}}}

使用`-b`标志指定要进行编号的行。此标志将参数作为“类型”。该类型告诉 nl 需要给哪些
行编号：

* 使用`a`给所有行编号
* `t`告诉 nl 不对空行和只有空格的行进行编号
* `n`指定不编号行。
* `p`给正则表达式模式指定的行编号

例，符合正则以字母`a`或`b`开始的行：

{{{class="brush: bash"
$ nl -b p^[ba]grocery.list
 1 apples
 2 bananas
 plums
 carrots
}}}

在默认情况下，nl 行号和文本之间使用制表符进行分隔。使用`-s`指定其他分隔符，
例如`=`号：

{{{class="brush: bash"
$nl -s= grocery.list
 1=apples
 2=bananas
 3=plums
 4=carrots
}}}

=== wc ===

wc (wordcount) 命令计算指定文件或来自 stdin 的行数、单词数（由空格分隔）和
字符数。

{{{class="brush: bash"
$wc grocery.list
 4 4 29 grocery.list
 $wc -l grocery.list
 4 grocery.list
 $wc -w grocery.list
 4 grocery.list
 $wc -c grocery.list
 29 grocery.list
}}}


=== paste ===

合并两个或多个文本文件，按行来进行合并。示例。如果`file1`的内容是：

{{{class="brush: bash"
1
2
3
}}}

`file2`是这样的:

{{{class="brush: bash"
a
b
c
d
}}}
	
{{{class="brush: bash"
[avishek@tecmint ~]$ paste file1 file2 > file3
}}}

结果`file3`将是:

{{{class="brush: bash"
1    a
2    b
3    c
     d
}}}

=== tr ===

tr 命令用来转换来自 stdin 的字符，在 stdout 中显示。tr 一般接受两个字符集合，
用第二个集合中的字符替换第一个集合中的字符。有许多预定义的字符类（集合）可供 tr 使用，还有其他命令可用。

这些预定义的字符类是：

* alnum：字母数字字符
* alpha：字母字符
* blank：空白字符
* cntrl：控制字符
* digit：数字字符
* graph：图形字符
* lower：小写字母字符
* print：可打印字符
* punct：标点字符
* space：空间字符
* upper：大写字符
* xdigit：16 进制字符

例：

tr 命令够将字符串中的小写字符转换成大写。

tr 示例：将字符串转换成大写

{{{class="brush: bash"
$ echo "Who is the standard text editor?" |tr [:lower:] [:upper:]
 WHO IS THE STANDARD TEXT EDITOR?
}}}

tr 可以用来从字符串中删除指定字符。

tr 示例：从字符串中删除指定字符

{{{class="brush: bash"
$ echo 'ed, of course!' |tr -d aeiou
 d, f crs!
}}}

使用 tr 将字符串中任何指定字符转换成空格。在序列中遇到多个指定字符时，它们会转换
成一个空格。

`-s`选项标志的行为在不同系统中表现不同。

tr 示例：将字符转变成空格

{{{class="brush: bash"
$ echo 'The ed utility is the standard text editor.' |tr -s astu ' '
 The ed ili y i he nd rd ex edi or.
}}}

`-s`选项标志可以用来取消字符串中多余的空格。

{{{class="brush: bash"
$ echo 'extra spaces – 5’ | tr -s [:blank:]
 extra spaces - 5
 $ echo ‘extra tabs – 2’ | tr -s [:blank:]
 extra tabs – 2
}}}

在基于 UNIX 和 Windows 系统之间转换文件时发生的常见问题就是行分隔符 
(line delimiters)。在 UNIX 系统中，行分隔符为一个换行符，而在 Windows 系统中，
则是用两个字符（即一个回车符和一个换行符）。使用 tr 配合某种重定向，可以解决这个
格式问题。

tr 示例：消除回车符

{{{class="brush: bash"
$ tr -d '\r' < dosfile.txt > unixfile.txt
}}}

=== colrm ===

使用 colrm，可以从流中剪切出文本列。在第一个示例中，使用 colrm 命令从管道的每行
文本中剪切出第 4 列到行尾。然后，将同一个文件发送至colrm，以删除第4列到第5列。

使用 colrm 删除列的示例

{{{class="brush: bash"
$ cat grocery.list |colrm 4
 app
 ban
 plu
 car
 $ cat grocery.list |colrm 4 5
 apps
 banas
 plu
 carts
}}}

=== expand 和 unexpand ===

expand 命令将制表符变成空格，而 unexpand 将空格变成制表符。这两个命令都接受
stdin 输入以及命令行指定文件的输入。使用`-t`选项可以设置一个或多个制表符停止位。

expand 和 unexpand 示例：

{{{class="brush: bash"
$ cat grocery.list|head -2|nl|nl
 1 1 apples
 2 2 bananas
 $ cat grocery.list|head -2|nl|nl|expand -t 5
 1 1 apples
 2 2 bananas
 $ cat grocery.list|head -2|nl|nl|expand -t 5,20
 1 1 apples
 2 2 bananas
 $ cat grocery.list|head -2|nl|nl|expand -t 5,20|unexpand -t 1,5
 1 1 apples
 2 2 bananas
}}}

=== fold ===

使用 fold 命令可以将行拆分为指定的宽度。这个命令最初是用来对无法支持换行的定宽
输出设备进行文本格式化。-w 选项标志允许使用指定行宽，而不是只使用默认的80列。

=== paste ===

paste 命令用来合并文件，将每个文件的记录逐一合并。利用重定向，可以通过将一个文件
中的每个记录与另一个文件的记录合并，来新建文件。

使用分隔符

{{{class="brush: bash"
$ paste -d, dummy1.txt dummy2.txt
 IBM,174.99
 INTC,22.69
 SAP,59.37
 VMW,102.92
}}}

=== uniq ===

uniq 命令通常用来惟一地列出输入源（通常是文件或 stdin）中的行。要正确操作，重复
的行必须连续放置于输入中。uniq 命令的输入通常会进行排序，因此重复的行会进行合并
。与 uniq 命令搭配使用的两个常用标志是：
* `-c`输出每行出现的次数，
* `-d`用来显示重复行的一个实例。

== 比较 ==

=== diff ===

diff 命令会对两个文件进行比较，报告两者之间的不同之处。diff 可接受多种选项标志。

* `-w`选项的忽略空格，
* `-i`选项标志在比较中忽略大小写区别

=== comm ===

comm 命令会对两个文件进行比较，但比较的方式与 diff 差别很大。comm 产生三列输出，
仅出现在第 1 个文件（第 1 列）的行，
仅出现在第 2 个文件（第 2 列）的行，
两个文件中都有的常见行（第 3 列）。

可使用选项标志来取消输出列。此命令可能在取消第 1 列和第 2 列时最有用，
只显示两个文件中常见的行，如下所示。

{{{class="brush: bash"
$ comm dummy_file1.dat dummy_file2.dat
 011 IBM 174.99
 011 IBM 174.99
 012 INTC 22.69
 012 INTC 22.78
 013 SAP 59.37
 014 VMW 102.92
 014 vmw 102.92
$ comm -12 dummy_file1.dat dummy_file2.dat
 013 SAP 59.37
}}}

=== cmp ===

`cmp`比较两个任意类型的文件并将结果输出至标准输出。如果两个文件相同， `cmp`默认
返回`0`；如果不同，将显示不同的字节数和第一处不同的位置。

以下面两个文件为例：

`file1.txt`

{{{class="brush: bash"
root@tecmint:~# cat file1.txt
 
Hi My name is Tecmint
}}}

`file2.txt`

{{{class="brush: bash"
root@tecmint:~# cat file2.txt
 
Hi My name is tecmint [dot] com
}}}

比较一下这两个文件，看看命令的输出。

{{{class="brush: bash"
root@tecmint:~# cmp file1.txt file2.txt
 
file1.txt file2.txt differ: byte 15, line 1
}}}
