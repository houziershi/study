
%title Part VI

%toc Part VI





= 抽象成员 =

Scala中不仅可以指定方法为抽象，还可以声明字段甚至抽象类型为类和特质的成员。

== 抽象成员的快速浏览 ==

在特质中分别对类型（T）、方法（transform）、val（initial）、var（current）的
抽象声明做出了一个例子：

{{{class="brush: scala"
  trait Abstract {
    type T
    def transform(x: T): T
    val initial: T
    var current: T
  }
}}}

实现：

{{{class="brush: scala"
  class Concrete extends Abstract {
    type T = String
    def transform(x: String) = x + x
    val initial = "hi"
    var current = initial
  }
}}}

== 类型成员 ==

（略）

== 抽象val ==

val是不可变的，抽象的val指定了类型与变量名，不指定值：

{{{class="brush: scala"
  val initial: String
}}}

实现时指定值：

{{{class="brush: scala"
  val initial = "hi"
}}}

如果不知道类中定义的确切内容，但是确定对于每个实例来说值都是不可变的。在这样的
情况下可以使用抽象的val声明。

可以注意到，抽象val的格式非常类似于下面的抽象无参数方法声明：

{{{class="brush: scala"
  def initial: String
}}}

客户代码将使用统一的`obj.initial`方法引用val及方法。如果`initial`是抽象val，那么
客户就可以保证每次引用都将得到同样的值。如果`initial`是抽象方法那就无法保证，
因为在不同的实现中`initial`可以被实现为每次调用都返回不同的值。

换句话说抽象的val限制了合法实现的方式：任何实现都必须是`val`类型的定义不可以是
`var`。另一方面，抽象方法声明可以被实现为具体的方法定义或具体的`val`定义。

所以在下面的代码中，`Apple`是合法的子类而`BadApple`不是：

{{{class="brush: scala"
  abstract class Fruit {
    val v: String // `v' for value
    def m: String // `m' for method
  }

  abstract class Apple extends Fruit {
    val v: String
    val m: String // OK to override a `def' with a `val'
  }

  abstract class BadApple extends Fruit {
    def v: String // ERROR: cannot override a `val' with a `def'
    def m: String
  }
}}}

== 抽象var ==

在特质里使用，只声明类型与名称，没有初始值：

{{{class="brush: scala"
  trait AbstractTime {
    var hour: Int
    var minute: Int
  }
}}}

也会有自动扩展的`getter`与`setter`方法，上面的代码相当于：

{{{class="brush: scala"
  trait AbstractTime {
    def hour: Int          // getter for `hour'
    def hour_=(x: Int)     // setter for `hour'
    def minute: Int        // getter for `minute'
    def minute_=(x: Int)   // setter for `minute'
  }
}}}

== 初始化抽象val ==

结合特质来使用，抽象val可以让子类扩展提供父类没有的参数与细节。因为特质缺省能
用来传递参数的构造器。

拿前面的实数类来作例子，以下特质：

{{{class="brush: scala"
  trait RationalTrait { 
    val numerArg: Int 
    val denomArg: Int 
  } 
}}}

为了实例化这个特质，先要实现val。在这里我们要用到新的`new`语法结构：

{{{class="brush: scala"
  new RationalTrait {
    val numerArg = 1
    val denomArg = 2
  }
}}}

上面的代码会产混入了特质的匿名类实例，类似于`new Rational(1, 2)`。当然区别还是
有的：

{{{class="brush: scala"
  new Rational(expr1, expr2)
}}}

上面的两个表达式会在类初始化前计算，而相反的：

{{{class="brush: scala"
  new RationalTrait {
    val numerArg = expr1
    val denomArg = expr2
  }
}}}

上面的两个表达式会作为匿名类初始化的一部分计算。而匿名类初始化在`RationalTrait`
之后执行，所以`numerArg`和`denomArg`的值在`RationalTrait`初始化期间还没有准备好
，都是`Int`类型的默认值`0`。

所以对下面的代码来说，这会成为一个问题，因为其中定义了经过约分后的分子与分母：

{{{class="brush: scala"
  trait RationalTrait { 
    val numerArg: Int 
    val denomArg: Int 
    require(denomArg != 0)
    private val g = gcd(numerArg, denomArg)
    val numer = numerArg / g
    val denom = denomArg / g
    private def gcd(a: Int, b: Int): Int = 
      if (b == 0) a else gcd(b, a % b)
    override def toString = numer +"/"+ denom
  }
}}}

如果尝试使用某种分子和分母的表达式而不是简单的字面量实例化这个特质，会引起以下
错误：

{{{class="brush: scala"
  scala> val x = 2
  x: Int = 2

  scala> new RationalTrait {
       |   val numerArg = 1 * x
       |   val denomArg = 2 * x
       | }
  java.lang.IllegalArgumentException: requirement failed
          at scala.Predef$.require(Predef.scala:107)
          at RationalTrait$class.$init$(<console>:7)
          at $anon$1.<init>(<console>:7)
          ....
}}}

解决方案有两个，分别是预初始化字段和懒加载val。


=== 预初始化字段 ===

==== 用于匿名类实例 ====

给字段定义加上花括号，放在超类的构造器之前：

{{{class="brush: scala"
  scala> new { 
       |   val numerArg = 1 * x
       |   val denomArg = 2 * x 
       | } with RationalTrait
  res15: java.lang.Object with RationalTrait = 1/2
}}}

==== 用于类 ====

不仅匿名类可以用预加载，有名称的类和单例对象也可以。

注意要放在关键字`extends`后面：

{{{class="brush: scala"
  object twoThirds extends {
    val numerArg = 2
    val denomArg = 3
  } with RationalTrait
}}}

由于预初始化的字段的超类构造器调用前被初始化，所以不能引用正在被构造的对象。所以
对于`this`实际指向的是正被构造的类或对象的对象，而来是被构造的对象本身：

{{{class="brush: scala"
  scala> new {
     |   val numerArg = 1
     |   val denomArg = this.numerArg * 2
     | } with RationalTrait
  <console>:8: error: value numerArg is not a
       member of object $iw
           val denomArg = this.numerArg * 2
                               ^
}}}

因为实例还没有构建完成，所以会报错。`$iw`是合成对象，解释器把用户输出语句放在
这个对象中。

{{{class="brush: scala"
  class RationalClass(n: Int, d: Int) extends {
    val numerArg = n
    val denomArg = d
  } with RationalTrait {
    def + (that: RationalClass) = new RationalClass(
      numer * that.denom + that.numer * denom,
      denom * that.denom
    )
  }
}}}



=== 懒加载val ===

懒加载让表达式在`val`第一次被使用的时候才计算机。格式为把`lazy`修饰加在`val`上。

普通情况下初始化与类初始化一起的：

{{{class="brush: scala"
  scala> object Demo {
       |   val x = { println("initializing x"); "done" }
       | }
  defined module Demo


  scala> Demo
  initializing x
  res19: Demo.type = Demo$@97d1ff

  scala> Demo.x
  res20: java.lang.String = done
}}}

使用了懒加载以后，`val`的初始化延迟到第一次使用时：

{{{class="brush: scala"
  scala> object Demo {
       |   lazy val x = { println("initializing x"); "done" }
       | }
  defined module Demo

  scala> Demo
  res21: Demo.type = Demo$@d81341

  scala> Demo.x
  initializing x
  res22: java.lang.String = done
}}}

上面的情况有点像是用`def`把`x`定义为一个无参的方法，不同于`def`的是计算只进行一次。

通过上面两个例子可以看出，单例对象的初始化也很像懒加载。它们在第一次被使用时进行
初始化。

通过懒加载重新实现`RationalTrait`，与前一版本的主要变化是`require`子句从特质的
方法体移动到了计算`numerArg`和`denomArg`最大公约数的私有字段`g`的初始化器中。
所以这个版本中`LazyRationalTrait`初始化器已经用不干啥事儿了：

{{{class="brush: scala"
  trait LazyRationalTrait { 
    val numerArg: Int 
    val denomArg: Int 
    lazy val numer = numerArg / g
    lazy val denom = denomArg / g
    override def toString = numer +"/"+ denom
    private lazy val g = {
      require(denomArg != 0)
      gcd(numerArg, denomArg)
    }
    private def gcd(a: Int, b: Int): Int = 
      if (b == 0) a else gcd(b, a % b)
  }


  scala> val x = 2
  x: Int = 2

  scala> new LazyRationalTrait {
       |   val numerArg = 1 * x
       |   val denomArg = 2 * x
       | }
  res1: java.lang.Object with LazyRationalTrait = 1/2
}}}

在特质中的两个懒加载对象`number`和`denom`是在`toString`方法调用时才初始化。计算
它们的表达式要用到同样是懒加载的`g`。

应用懒加载还是要注意副作用，在有副作用的情况下跟踪加载顺序是很重要的事情。
无副作用的纯函数式应用配合懒加载是相当合适的。

懒加载并不是没有额外的开销，对于每次访问都会有一个方法被调用。这个方法会以线程
安全的方式检查该值是否已经被初始化。

== 抽象类型 ==

抽象类型声明`type T`应用在尚不可知的类型上，不同的子类可以提供不同的`T`实现。

以一个动物食性的例子来解释应用环境，动物吃食物：

{{{class="brush: scala"
  class Food
  abstract class Animal {
    def eat(food: Food)
  }
}}}

会在想让它们的子类牛吃草时遇到麻烦。`eat`方法不能重写，因为参数不能从`Food`转为
子类`Grass`：

{{{class="brush: scala"
  class Grass extends Food
  class Cow extends Animal {
    override def eat(food: Grass) {} // This won't compile
  }

  BuggyAnimals.scala:7: error: class Cow needs to be
  abstract, since method eat in class Animal of type
      (Food)Unit is not defined
  class Cow extends Animal {
        ^
  BuggyAnimals.scala:8: error: method eat overrides nothing
    override def eat(food: Grass) {}
                 ^
}}}

这样看来类型检查太严格了，应但是如果许子类的话又会失去类型检验保障。比如说喂牛
吃鱼：

{{{class="brush: scala"
  class Food
  abstract class Animal {
    def eat(food: Food)
  }
  class Grass extends Food
  class Cow extends Animal {
    override def eat(food: Grass) {} // This won't compile,
  }                                  // but if it did,...
  class Fish extends Food
  val bessy: Animal = new Cow
  bessy eat (new Fish)     // ...you could feed fish to cows.
}}}

更加精确的方式是能按不同的动物决定食物的种类，父类中指定动物只能吃食物：

{{{class="brush: scala"
  class Food
  abstract class Animal {
    type SuitableFood <: Food
    def eat(food: SuitableFood)
  }
}}}

`SuitableFood`被定义为抽象类，而且有上界`Food`。以后动物类中指定具体的食物子类：

{{{class="brush: scala"
  class Grass extends Food
  class Cow extends Animal {
    type SuitableFood = Grass
    override def eat(food: Grass) {}
  }
}}}

现在得到了比较合适的类型检查：

{{{class="brush: scala"
  scala> class Fish extends Food
  defined class Fish

  scala> val bessy: Animal = new Cow
  bessy: Animal = Cow@674bf6

  scala> bessy eat (new Fish)
  <console>:10: error: type mismatch;
   found   : Fish
   required: bessy.SuitableFood
         bessy eat (new Fish)
                    ^
}}}



== 路径依赖类型 ==

看一下前面例子的最后一条错误信息。它说明需要的类型是`bessy.SuitableFood`，这里的
`SuitableFood`是`bessy`引用的对象的成员。

这样的类型被称为路径依赖类型，路径指的是对象的引用。不同路径将产不同的类型：

{{{class="brush: scala"
  class DogFood extends Food
  class Dog extends Animal {
    type SuitableFood = DogFood
    override def eat(food: DogFood) {}
  }

  scala> val bessy = new Cow
  bessy: Cow = Cow@10cd6d

  scala> val lassie = new Dog
  bootsie: Dog = Dog@d11fa6

  scala> lassie eat (new bessy.SuitableFood)
  <console>:13: error: type mismatch;
   found   : Grass
   required: DogFood
         lassie eat (new bessy.SuitableFood)
                     ^
}}}

`bessy.SuitableFood`不能匹配`lassie.SuitableFood`，但如果同样是`Dog`的话，情况又
不同。因为`Dog`的`SuitableFood`被定义为`DogFood`类的别名，所以实际上是一样的：

{{{class="brush: scala"
  scala> val bootsie = new Dog
  bootsie: Dog = Dog@54ca71

  scala> lassie eat (new bootsie.SuitableFood)
}}}

=== 与Java内部类的区别 ===

路径依赖有点像Java里的内部类，但区别是：路径依赖表达了外在的对象，而内部类表达了
外在的类。Java的内部类在Scala表达为两个类：

{{{class="brush: scala"
  class Outer {
    class Inner
  }
}}}

与Java的`Outer.Inner`不同，Scala中表达为`Outer#Inner`。

总之，要注意。路径依赖是在对象中的类，而不是Java那样类中的类。

`.`语法留给对象使用：

{{{class="brush: scala"
  val o1 = new Outer
  val o2 = new Outer
}}}

虽然`o1.Inner`和`o2.Inner`是不同的两个路径依赖类型，但两个都能匹配更加通用的
`Outer#Inner`。

和Java中一样，Scala的内部类实例也有对外部类实例的引用。所以不能只有内部类实例而
没有外部类实例。有两个方式实例化内部类：

* 直接在外部类方法体中实例化，这样可以用`this`引用外部类对象。
* 使用路径依赖类型。如`o1.Inner`。返回的内部类有对`01`的引用。例子如下：

{{{class="brush: scala"
  scala> new o1.Inner
  res1: o1.Inner = Outer$Inner@13727f
}}}

相对的，类型`Outer#Inner`是没有指向对象的引用的，所以不能创建它的实例：

{{{class="brush: scala"
  scala> new Outer#Inner
  <console>:6: error: Outer is not a legal prefix for
    a constructor
         new Outer#Inner
                   ^
}}}


== 枚举对象 ==

Scala没有枚举类，而是用标准库中的工具类`scala.Enumeration`用来扩展实现枚举对象：

{{{class="brush: scala"
  object Color extends Enumeration {
    val Red = Value
    val Green = Value
    val Blue = Value
  }
}}}

注意：枚举是和路径依赖一样，是对象中的类，不是类中的类。

还可以简化：

{{{class="brush: scala"
  object Color extends Enumeration {
    val Red, Green, Blue = Value
  }
}}}

可以`Color`的全部成员，然后直接写颜色名：

{{{class="brush: scala"
  import Color._
}}}

前面定义的`Red`、`Green`和`Blue`这些值的类型为`Enumeration`定义的内部类，名为
`Value`。同名无参数方法`Value`返回该类的新对象，即`Color.Red`类的值类型是
`Color.Value`。而且是依赖路径的。如：

{{{class="brush: scala"
  object Direction extends Enumeration {
    val North, East, South, West = Value
  }
}}}

上面就定义了一个完全不同的类型，因为路径不同。`Direction`与`Color`的`Value`也是
不同的类。

=== 枚举的类型 ===

注意枚举的类型是`Direction.Value`而不是`Direction`。`Direction`是持有这些值的
单例对象。有些人推荐增加一个类型的别名：

{{{class="brush: scala"
  object Direction extends Enumeration {
		type Direction = Value
    val North, East, South, West = Value
  }
}}}

这样类型就从`Direction.Value`增加一个别名`Direction.Direction`。虽然还是又长又
啰嗦，但是在`import Direction._`以后可以只写`Direction`：

{{{class="brush: scala"
import Direction._

def func01(direction: Direction) = {
	if (direction == West)
		"stop"
	else
		"keep moving"
}
}}}

=== 枚举值 ===

枚举的值默认从`0`开始增加，用成员方法`id`可以取出值：

{{{class="brush: scala"
  scala> Direction.East.id
  res5: Int = 1
}}}

反过来也可以通过非零整数取得`id`：

{{{class="brush: scala"
  scala> Direction(1)
  res6: Direction.Value = East
}}}

当然想指定`id`也可以：

{{{class="brush: scala"
object Direction extends Enumeration {
  val North = Value(10)
  val East = Value(20)
  val South = Value(30)
  val West = Value(40)
}
}}}

还可以重载`Value`方法把名称与值对应起来：

{{{class="brush: scala"
object Direction extends Enumeration {
  val North = Value(10,"North")
  val East = Value(20,"East")
  val South = Value(30,"South")
  val West = Value(40,"West")
}
}}}

直接通过`toString`方法就可以取得枚举的名称：

{{{class="brush: scala"
  scala> for (d <- Direction) print(d +" ")
  North East South West 
}}}

也可以通过`withName`方法通过名称得到枚举：

{{{class="brush: scala"
Direction.withName("West")
}}}



== 案例研究：货币 ==

设计一个货币类能处理不同的货币。定义抽象类可以扩展为具体不同的货币。当然第一个
版本肯定是不完善的：

{{{class="brush: scala"
  // A first (faulty) design of the Currency class
  abstract class Currency {
    val amount: Long
    def designation: String 
    override def toString = amount +" "+ designation
    def + (that: Currency): Currency = ...
    def * (x: Double): Currency = ...
  }
}}}

`amount`和`designation`分别代表金额和表示金额的符号。其他方法还有加法和乘法操作
。这个版本的问题是，在语法上两个不同的子类可以相加：

{{{class="brush: scala"
  abstract class Dollar extends Currency {
    def designation = "USD"
  }
  abstract class Euro extends Currency {
    def designation = "Euro"
  }
}}}

这样不同货币的相加是有问题的。所以下一个改进版本用抽象类型来标明末知的类型：

{{{class="brush: scala"
  abstract class AbstractCurrency {
    type Currency <: AbstractCurrency
    val amount: Long
    def designation: String 
    override def toString = amount +" "+ designation
    def + (that: Currency): Currency = ...
    def * (x: Double): Currency = ...
  }
}}}

每个子类都要把`Currency`指定为这个类自身，扩展实现是类似于这样：

{{{class="brush: scala"
  abstract class Dollar extends AbstractCurrency {
    type Currency = Dollar
    def designation = "USD"
  }
}}}

这个版本的问题在于加法与乘法的定义。首先想到的把金额转为正确类型的货币的方法可能
是这样的：

{{{class="brush: scala"
  def + (that: Currency): Currency = new Currency {
    val amount = this.amount + that.amount
  }
}}}

但这通不过编译，因为Scala不能用抽象类型`new`出实例来，即使是作为其他类型的父类：

{{{class="brush: scala"
  error: class type required
    def + (that: Currency): Currency = new Currency {
}}}

使用工厂方法是个解决方案：用声明抽象方法代替直接创建抽象类的实例：

{{{class="brush: scala"
  abstract class AbstractCurrency {
    type Currency <: AbstractCurrency // abstract type
    def make(amount: Long): Currency  // factory method
    ...                               // rest of class
  }
}}}

但这样有别的问题，因为这样不得不把工厂方法放到`AbstractCurrency`类中，所有的实例
都可以调用`make`方法，也就都有了创建货币的能力：

{{{class="brush: scala"
  myDollar.make(100)  // here are a hundred more!
}}}

所以把工厂方法移到一个新的类中，新的类叫`CurrencyZone`。把`AbstractCurrency`和
`Currency`也作为它的内部类：

{{{class="brush: scala"
  abstract class CurrencyZone {
    type Currency <: AbstractCurrency
    def make(x: Long): Currency
    abstract class AbstractCurrency {
      val amount: Long
      def designation: String 
      override def toString = amount +" "+ designation
      def + (that: Currency): Currency = 
        make(this.amount + that.amount)
      def * (x: Double): Currency = 
        make((this.amount * x).toLong)
    }
  }
}}}

这样按不同货币来扩展：

{{{class="brush: scala"
  object US extends CurrencyZone {
    abstract class Dollar extends AbstractCurrency {
      def designation = "USD"
    }
    type Currency = Dollar
    def make(x: Long) = new Dollar { val amount = x }
  }
}}}

`US`中定义了类`Dollar`。它的类型是`US.Dollar`。

继续改进设计：关于单位，单位不仅是美元，还有美分。所以让`amount`以美分为单位比较
合适。所以用多一个字段`CurrencyUnit`记录单位：

{{{class="brush: scala"
  class CurrencyZone { 
    ... 
    val CurrencyUnit: Currency 
  } 
}}}

子类里再加上两个方法直接把1美元代表100美分的逻辑描述出来：

{{{class="brush: scala"
  object US extends CurrencyZone {
    abstract class Dollar extends AbstractCurrency {
      def designation = "USD"
    }
    type Currency = Dollar
    def make(cents: Long) = new Dollar {
      val amount = cents
    }
    val Cent = make(1)
    val Dollar = make(100)
    val CurrencyUnit = Dollar
  }
}}}

还有显示问题，用多数内部类型上都带的`format`方法格式化美元与美分的小数显示，如
`10.23 USD`：

{{{class="brush: scala"
    ((amount.toDouble / CurrencyUnit.amount.toDouble)
     formatted ("%."+ decimals(CurrencyUnit.amount) +"f")
     +" "+ designation)
}}}

输出字符的长度是通过`decimals`方法得出的。`decimals`方法返回十进制数字所要占用的
字符长度。如对于`decimals(10)`代表0到9，会占用一个字符，而`decimals(100)`是0到99
会占用两个字符。`decimals`方法通过简单递归实现：

{{{class="brush: scala"
  private def decimals(n: Long): Int = 
    if (n == 1) 0 else 1 + decimals(n / 10)
}}}

相对的看一下欧元的实现：

{{{class="brush: scala"
  object Europe extends CurrencyZone {
    abstract class Euro extends AbstractCurrency {
      def designation = "EUR"
    }
    type Currency = Euro
    def make(cents: Long) = new Euro {
      val amount = cents
    }
    val Cent = make(1)
    val Euro = make(100)
    val CurrencyUnit = Euro
  }

  object Japan extends CurrencyZone {
    abstract class Yen extends AbstractCurrency {
      def designation = "JPY"
    }
    type Currency = Yen
    def make(yen: Long) = new Yen {
      val amount = yen
    }
    val Yen = make(1)
    val CurrencyUnit = Yen
  }
}}}

再改进一下，增加汇率的功能。先用一个新的对象来记录汇率：

{{{class="brush: scala"
  object Converter {
    var exchangeRate = Map(
      "USD" -> Map("USD" -> 1.0   , "EUR" -> 0.7596, 
                   "JPY" -> 1.211 , "CHF" -> 1.223),
      "EUR" -> Map("USD" -> 1.316 , "EUR" -> 1.0   , 
                   "JPY" -> 1.594 , "CHF" -> 1.623),
      "JPY" -> Map("USD" -> 0.8257, "EUR" -> 0.6272, 
                   "JPY" -> 1.0   , "CHF" -> 1.018),
      "CHF" -> Map("USD" -> 0.8108, "EUR" -> 0.6160, 
                   "JPY" -> 0.982 , "CHF" -> 1.0  )
    )
  }
}}}

在货币中增加根据汇率来转换的功能。接收一个外币类型，把自己的金额转成这个外币的
金额：

{{{class="brush: scala"
  def from(other: CurrencyZone#AbstractCurrency): Currency = 
    make(Math.round(
      other.amount.toDouble * Converter.exchangeRate
        (other.designation)(this.designation)))
}}}

参数是末知的`CurrencyZone#AbstractCurrency`，所以能处理任意外币类型。

全部的货币代码，假设都放在`org.stairwaybook.currencies`包中：

{{{class="brush: scala"
  abstract class CurrencyZone {

    type Currency <: AbstractCurrency
    def make(x: Long): Currency

    abstract class AbstractCurrency {

      val amount: Long
      def designation: String 

      def + (that: Currency): Currency = 
        make(this.amount + that.amount)
      def * (x: Double): Currency = 
        make((this.amount * x).toLong)
      def - (that: Currency): Currency = 
        make(this.amount - that.amount)
      def / (that: Double) = 
        make((this.amount / that).toLong)
      def / (that: Currency) = 
        this.amount.toDouble / that.amount

      def from(other: CurrencyZone#AbstractCurrency): Currency = 
        make(Math.round(
          other.amount.toDouble * Converter.exchangeRate
            (other.designation)(this.designation)))

      private def decimals(n: Long): Int = 
        if (n == 1) 0 else 1 + decimals(n / 10)

      override def toString = 
        ((amount.toDouble / CurrencyUnit.amount.toDouble)
         formatted ("%."+ decimals(CurrencyUnit.amount) +"f")
         +" "+ designation)
    }

    val CurrencyUnit: Currency
  }
}}}

调用的例子：

{{{class="brush: scala"
  scala> import org.stairwaybook.currencies._

  scala> Japan.Yen from US.Dollar * 100
  res16: Japan.Currency = 12110 JPY

  scala> Europe.Euro from res16
  res17: Europe.Currency = 75.95 EUR

  scala> US.Dollar from res17
  res18: US.Currency = 99.95 USD
}}}

相同类型的货币可以相加，不同类型的不可以相加：

{{{class="brush: scala"
  scala> US.Dollar * 100 + res18
  res19: currencies.US.Currency = 199.95


  scala> US.Dollar + Europe.Euro
  <console>:7: error: type mismatch;
   found   : currencies.Europe.Euro
   required: currencies.US.Currency
         US.Dollar + Europe.Euro
                            ^
}}}

类型抽象实现了不同货币不能相加的功能。像是1999年9月23日，混用英制单位和公制单位
引起的火星航天器坠毁事件不会再重演了。












= 有状态的对象 =

类似于JavaBean的getter和setter方法，Scala对象的非私有`var x`有自动生成的访问方法
`x`和设值方法`x_=`。

对于类中的字段：

{{{class="brush: scala"
var hour = 12
}}}

会有额外的getter方法`hour`和setter方法`hour_=`。方法的访问性与字段一致。

拿这个例子来说：

{{{class="brush: scala"
  class Time {
    var hour = 12
    var minute = 0
  }
}}}

和下面的代码是一样的：

{{{class="brush: scala"
  class Time {

    private[this] var h = 12
    private[this] var m = 0

    def hour: Int = h
    def hour_=(x: Int) { h = x }

    def minute: Int = m
    def minute_=(x: Int) { m = x }
  }
}}}

所以可以直接定义getter和setter。

下面的代码在setter前进行检查：

{{{class="brush: scala"
  class Time {

    private[this] var h = 12
    private[this] var m = 12

    def hour: Int = h
    def hour_= (x: Int) {
      require(0 <= x && x < 24)
      h = x
    }

    def minute = m
    def minute_= (x: Int) {
      require(0 <= x && x < 60)
      m = x
    }
  }
}}}

再看一个温度的例子：

{{{class="brush: scala"
  class Thermometer {

    var celsius: Float = _

    def fahrenheit = celsius * 9 / 5 + 32
    def fahrenheit_= (f: Float) {
      celsius = (f - 32) * 5 / 9
    }
    override def toString = fahrenheit +"F/"+ celsius +"C"
  }
}}}

注意：变量`celsius`的值为`_`，表示初始化值。对于数值代表`0`，对于布尔类型代表
`false`，引用类型则代表`null`。

Scala中的初始化器`=_`，如果写成：

{{{class="brush: scala"
var celsius
}}}

这样就成了抽象变量（以后到了“抽象成员”这一章介绍），而不是一个没有初始化的变量。
这个和Java的习惯很不一样。

使用的例子：

{{{class="brush: scala"
  scala> val t = new Thermometer
  t: Thermometer = 32.0F/0.0C

  scala> t.celsius = 100

  scala> t
  res3: Thermometer = 212.0F/100.0C

  scala> t.fahrenheit = -40

  scala> t
  res4: Thermometer = -40.0F/-40.0C
}}}

== 案例：离散事件模拟 ==

来个SICP（Structure and Interpretation of Computer Programs，计算机程序的构造与
解释）里的例子。

== 为数字电路定制语言 ==

<img src="images/scala/18.01.png" />

为了实现这三种基本的门，我们建立一个`Wire`类代表线路。可以这样构造线路：

{{{class="brush: scala"
val a = new Wire
val b = new Wire
val c = new Wire
}}}

或简洁地写成：

{{{class="brush: scala"
val a, b, c = new Wire
}}}

三个基本的门电路由以下三个过程模拟：

{{{class="brush: scala"
  def inverter(input: Wire, output: Wire)
  def andGate(a1: Wire, a2: Wire, output: Wire)
  def orGate(o1: Wire, o2: Wire, output: Wire)
}}}

注意这里的过程都没有返回值。按照函数式的思想，应该是返回构造好的门对象。但是在
这里我们选择了没有返回值，而是通过副作用来模拟门电路。副作用让一步步渐进地构造
复杂的电路更加容易，如`inverter(a,b)`在`a`与`b`之间放置反转电路。

还有这里的方法名没有用动词而是用了名词，这是为了方便说明制造的是哪个门电路。这
反映了DSL说明的本质：应该描述电路，而不是如何制造它。

下面是一个半加法器（half-adder）。它根据两个输入`a`和`b`产生累加和`s`。

累加的定义为：`s= (a+b)%2`及进位`c`，其中的`c = (a+b)/2`。

半加法器电路图：

<img src="images/scala/18.02.png" />

用我们的代码描述：

{{{class="brush: scala"
  def halfAdder(a: Wire, b: Wire, s: Wire, c: Wire) {
    val d, e = new Wire
    orGate(a, b, d)
    andGate(a, b, c)
    inverter(c, e)
    andGate(d, e, s)
  }
}}}

接下来是一个全加法器，定义为根据参数`a`和`b`还有进位`cin`得到两个输出。一个是和
`sum = (a+b+cin)%2`，另一个是进位输出`count = (a+b+cin)/2`：

<img src="images/scala/18.03.png" />

代码为：

{{{class="brush: scala"
  def fullAdder(a: Wire, b: Wire, cin: Wire,
      sum: Wire, cout: Wire) {

    val s, c1, c2 = new Wire
    halfAdder(a, cin, s, c1)
    halfAdder(b, s, sum, c2)
    orGate(c1, c2, cout)
  }
}}}

这是内部DSL很好的例子：通过宿主语言将特定的语言定义为库面不是完全实现这种语言。


== Simulation API ==

完成了对电路的模拟以后，再来分析对时间的模拟。模拟时间包括在指定时间执行指定的
动作。

私有变量保存时间，但提供对时间的公开访问：

{{{class="brush: scala"
  private var curtime: Int = 0

  def currentTime: Int = curtime
}}}

定义动作：在我们的例子中，把参数列表和返回都为空的过程`() => Unit`作为基本的动作
。给这样类型的过程起个别名叫`Action`：

{{{class="brush: scala"
type Action = () => Unit
}}}

在特定时间执行的的操作定义为工作项目（work item）：

{{{class="brush: scala"
  case class WorkItem(time: Int, action: Action)
}}}

注意这里用的是样本类，所以用工厂方法创建实例就可以自动获得访问构造器参数`time`和
`action`的方法。

还有一个类来保存末执行工作条目的排程表（agenda），注意它是按时间排序的：

{{{class="brush: scala"
  private var agenda: List[WorkItem] = List()
}}}

提供在一定 时延后加入新的工作条目的方法，注意加入操作也要排序：

{{{class="brush: scala"
  def afterDelay(delay: Int)(block: => Unit) {
    val item = WorkItem(currentTime + delay, () => block)
    agenda = insert(agenda, item)
  }

  private def insert(ag: List[WorkItem],
      item: WorkItem): List[WorkItem] = {
    if (ag.isEmpty || item.time < ag.head.time) item :: ag
    else ag.head :: insert(ag.tail, item)
  }
}}}

核心是`run`方法：

{{{class="brush: scala"
  def run() {
    afterDelay(0) {
      println("*** simulation started, time = "+
          currentTime +" ***")
    }
    while (!agenda.isEmpty) next()
  }
  
  private def next() {
    (agenda: @unchecked) match {
      case item :: rest =>
        agenda = rest
        curtime = item.time
        item.action()
    }
  }
}}}

注意这里为了方便去掉了空列表的情况。为了防止编译器警告我们在模式匹配里故意漏掉了
列表为空的情况，在这里使用了`(agenda: @unchecked) match`而不是`agenda match`。

完整的代码在包`org.stairwaybook.simulation`里：

{{{class="brush: scala"
  abstract class Simulation {

    type Action = () => Unit

    case class WorkItem(time: Int, action: Action)

    private var curtime = 0
    def currentTime: Int = curtime

    private var agenda: List[WorkItem] = List()

    private def insert(ag: List[WorkItem],
        item: WorkItem): List[WorkItem] = {

      if (ag.isEmpty || item.time < ag.head.time) item :: ag
      else ag.head :: insert(ag.tail, item)
    }

    def afterDelay(delay: Int)(block: => Unit) {
      val item = WorkItem(currentTime + delay, () => block)
      agenda = insert(agenda, item)
    }

    private def next() {
      (agenda: @unchecked) match {
        case item :: rest =>
          agenda = rest
          curtime = item.time
          item.action()
      }
    }

    def run() {
      afterDelay(0) {
        println("*** simulation started, time = "+
            currentTime +" ***")
      }
      while (!agenda.isEmpty) next()
    }
  }
}}}



== 电路模拟 ==

这里创建了`BasicCircuitSiomulation`来模拟电路。

为了模拟电路和延迟声明了三个方法：`InverterDelay`、`AndGateDelay`、`OrGateDelay`。由于
不同模拟电路的技术参数不同，所以这三个方法是抽象方法。

=== Wire类 ===

需要支持的三种基本动作：

`getSignal: Boolean`：返回当前线路上的信号。

`setSignal(sig: Boolean)`：设置线路信号。

`addAction(p: Action)`：添加动作到线路上。基本思想是所有附加在某线路上的动作过程
在每次信号改变时被执行。通过连接组件可以为线路添加该组件的功能。加上的动作会在被
加到线路时以及每次线路信号改变时被执行。

实现代码`sigVal`代表当前信号，`actions`是附加的动作过程。需要注意的是`setSignal`
方法，当信号改变时，新的信号首先被保存在变量`sigVal`中，然后执行所有线路附加
动作：

{{{class="brush: scala"
  class Wire {
    private var sigVal = false
    private var actions: List[Action] = List()

    def getSignal = sigVal

    def setSignal(s: Boolean) =
      if (s != sigVal) {
        sigVal = s
        actions foreach (_ ())
      }

    def addAction(a: Action) = {
      actions = a :: actions
      a()
    }
  }
}}}

注意上面的缩写格式：`actions forearch(_())`代表对每个元素执行`_()`。在“函数和装饰”这一章的
“占位符”部分说明过，函数`_()`是`f => f()`的缩写，代表空参数函数。

=== 反转操作 ===

`inverter`方法会在安装之后以及每次线路信号变化时被调用。它通过`setSignal`把输出设为输入的反值。

另外，由于还要模拟电路的响应时间，所以输入值改变以后，还要等`InverterDelay`单位的模拟时间后，
才发生改变：

{{{class="brush: scala"
  def inverter(input: Wire, output: Wire) = {
    def invertAction() {
      val inputSig = input.getSignal
      afterDelay(InverterDelay) {
        output setSignal !inputSig
      }
    }
    input addAction invertAction
  }
}}}

注意这里的`afterDelay`方法是把这个操作加到队列的最后面。

=== 与门和或门操作 ===

大致思想和上面类似：

{{{class="brush: scala"
  def andGate(a1: Wire, a2: Wire, output: Wire) = {
    def andAction() = {
      val a1Sig = a1.getSignal
      val a2Sig = a2.getSignal
      afterDelay(AndGateDelay) {
        output setSignal (a1Sig & a2Sig)
      }
    }
    a1 addAction andAction
    a2 addAction andAction
  }

  def orGate(o1: Wire, o2: Wire, output: Wire) {
    def orAction() {
      val o1Sig = o1.getSignal
      val o2Sig = o2.getSignal
      afterDelay(OrGateDelay) {
        output setSignal (o1Sig | o2Sig)
      }
    }
    o1 addAction orAction
    o2 addAction orAction
  }
}}}

=== 模拟输出 ===

通过探针（probe）观察线路上信号的改变。

还是在信号改变时被调用，显示输出线路的名称、模拟时间、信号值：

{{{class="brush: scala"
  def probe(name: String, wire: Wire) {
    def probeAction() {
      println(name +" "+ currentTime +
          " new-value = "+ wire.getSignal)
    }
    wire addAction probeAction
  }
}}}

=== 运行模拟器 ===

`BasicCircuitSimulation`继承了`CircuitSimulation`

{{{class="brush: scala"
  package org.stairwaybook.simulation

  abstract class CircuitSimulation
    extends BasicCircuitSimulation {

    def halfAdder(a: Wire, b: Wire, s: Wire, c: Wire) {
      val d, e = new Wire
      orGate(a, b, d)
      andGate(a, b, c)
      inverter(c, e)
      andGate(d, e, s)
    }

    def fullAdder(a: Wire, b: Wire, cin: Wire,
        sum: Wire, cout: Wire) {

      val s, c1, c2 = new Wire
      halfAdder(a, cin, s, c1)
      halfAdder(b, s, sum, c2)
      orGate(c1, c2, cout)
    }
  }
}}}

剩下的电路延迟时间和定义被模拟的电路都留在Scala交互Shell中实现：

{{{class="brush: scala"
  scala> import org.stairwaybook.simulation._
  import org.stairwaybook.simulation._
}}}

定义延迟时间：

{{{class="brush: scala"
  scala> object MySimulation extends CircuitSimulation {
       | def InverterDelay = 1
       | def AndGateDelay = 3
       | def OrGateDelay = 5
       | }
  defined module MySimulation
}}}

定义一下简化以后对`MySimulation`的引用：

{{{class="brush: scala"
  scala> import MySimulation._
  import MySimulation._
}}}

定义线路的部分。先定义四根线路，再把探针放在其中的两根上。探针会立即输出结果：

{{{class="brush: scala"
  scala> val input1, input2, sum, carry = new Wire
  input1: MySimulation.Wire =
      simulator.BasicCircuitSimulation$Wire@111089b
  input2: MySimulation.Wire =
      simulator.BasicCircuitSimulation$Wire@14c352e
  sum: MySimulation.Wire =
      simulator.BasicCircuitSimulation$Wire@37a04c
  carry: MySimulation.Wire =
      simulator.BasicCircuitSimulation$Wire@1fd10fa

  scala> probe("sum", sum)
  sum 0 new-value = false

  scala> probe("carry", carry)
  carry 0 new-value = false
}}}

加上半加法器：

{{{class="brush: scala"
  scala> halfAdder(input1, input2, sum, carry)
}}}

逐次把两根输入线信号设为`true`，并执行模拟过程：

{{{class="brush: scala"
  scala> input1 setSignal true

  scala> run()
  *** simulation started, time = 0 ***
  sum 8 new-value = true

  scala> input2 setSignal true

  scala> run()
  *** simulation started, time = 8 ***
  carry 11 new-value = true
  sum 15 new-value = false
}}}

全部代码如下：

{{{class="brush: scala"
package org.stairwaybook.simulation

abstract class BasicCircuitSimulation extends Simulation {

  def InverterDelay: Int
  def AndGateDelay: Int
  def OrGateDelay: Int

  class Wire {

    private var sigVal = false
    private var actions: List[Action] = List()

    def getSignal = sigVal

    def setSignal(s: Boolean) =
      if (s != sigVal) {
        sigVal = s
        actions foreach (_ ())
      }

    def addAction(a: Action) = {
      actions = a :: actions
      a()
    }
  }

  def inverter(input: Wire, output: Wire) = {
    def invertAction() {
      val inputSig = input.getSignal
      afterDelay(InverterDelay) {
        output setSignal !inputSig
      }
    }
    input addAction invertAction
  }

  // continued in Listing 18.10...
  // ...continued from Listing 18.9
  def andGate(a1: Wire, a2: Wire, output: Wire) = {
    def andAction() = {
      val a1Sig = a1.getSignal
      val a2Sig = a2.getSignal
      afterDelay(AndGateDelay) {
        output setSignal (a1Sig & a2Sig)
      }
    }
    a1 addAction andAction
    a2 addAction andAction
  }

  def orGate(o1: Wire, o2: Wire, output: Wire) {
    def orAction() {
      val o1Sig = o1.getSignal
      val o2Sig = o2.getSignal
      afterDelay(OrGateDelay) {
        output setSignal (o1Sig | o2Sig)
      }
    }
    o1 addAction orAction
    o2 addAction orAction
  }

  def probe(name: String, wire: Wire) {
    def probeAction() {
      println(name +" "+ currentTime +
          " new-value = "+ wire.getSignal)
    }
    wire addAction probeAction
  }
}

abstract class Simulation {

  type Action = () => Unit

  case class WorkItem(time: Int, action: Action)

  private var curtime = 0
  def currentTime: Int = curtime

  private var agenda: List[WorkItem] = List()

  private def insert(ag: List[WorkItem],
      item: WorkItem): List[WorkItem] = {

    if (ag.isEmpty || item.time < ag.head.time) item :: ag
    else ag.head :: insert(ag.tail, item)
  }

  def afterDelay(delay: Int)(block: => Unit) {
    val item = WorkItem(currentTime + delay, () => block)
    agenda = insert(agenda, item)
  }

  private def next() {
    (agenda: @unchecked) match {
      case item :: rest =>
        agenda = rest
        curtime = item.time
        item.action()
    }
  }

  def run() {
    afterDelay(0) {
      println("*** simulation started, time = "+
          currentTime +" ***")
    }
    while (!agenda.isEmpty) next()
  }
}


abstract class CircuitSimulation
  extends BasicCircuitSimulation {

  def halfAdder(a: Wire, b: Wire, s: Wire, c: Wire) {
    val d, e = new Wire
    orGate(a, b, d)
    andGate(a, b, c)
    inverter(c, e)
    andGate(d, e, s)
  }

  def fullAdder(a: Wire, b: Wire, cin: Wire,
      sum: Wire, cout: Wire) {

    val s, c1, c2 = new Wire
    halfAdder(a, cin, s, c1)
    halfAdder(b, s, sum, c2)
    orGate(c1, c2, cout)
  }
}

 object MySimulation extends CircuitSimulation {
           def InverterDelay = 1
           def AndGateDelay = 3
           def OrGateDelay = 5

  def main(args: Array[String]) {
    val input1, input2, sum, carry = new Wire

    probe("sum", sum)
    probe("carry", carry)
    halfAdder(input1, input2, sum, carry)

    input1 setSignal true
    run()

    input2 setSignal true
    run()
  }
}
}}}




= 实现列表 =

列表不是Scala语言的内建结构，而是定义在`Scala`包中的`List`抽象类。它有一个子类
`::`和一个子对象`Nil`。



== List类实现原理 ==

本节的目的是实现一个简化的List实现：

{{{class="brush: scala"
  package scala
  abstract class List[+T] { ... }
}}}

作为一个抽象类`List`不能用像`new List`这样的空构造器构建，由类型参数`[+T]`表明
列表是协变的。


{{{class="brush: scala"
  scala> val xs = List(1, 2, 3)
  xs: List[Int] = List(1, 2, 3)

  scala> var ys: List[Any] = xs
  ys: List[Any] = List(1, 2, 3)
}}}

实现的目标要有以下三个功能：

{{{class="brush: scala"
    def isEmpty: Boolean
    def head: T
    def tail: List[T]
}}}

这三个方法在`List`类中是抽象的，被定义在`Nil`和`::`中。

=== Nil对象 ===

`Nil`对象继承自`List[Nothing]`，它定义了空列表。因为协变的作为它可以兼容任何类型
的`List`实例：

{{{class="brush: scala"
  case object Nil extends List[Nothing] {
    override def isEmpty = true
    def head: Nothing =
      throw new NoSuchElementException("head of empty list")
    def tail: List[Nothing] =
      throw new NoSuchElementException("tail of empty list")
  }
}}}

成员方法`head`的实现方法是抛出异常，因为对于成员类型`Nothing`来说，返回结果必须
是`Nothing`，而`Nothing`是个根本不存在的类型，所以它无法正常返回结果，只能抛出
异常。

=== Cons类 ===

`::`类读作“cons”，意思是“构造”，它实现了非空列表。“使用列表”这一章中“列表模式”里
说过模式中的每个中缀调用被作为构造器调用。

就是说：`x :: xs`是对类`::`的构造器调用`::(x, xs)`。

{{{class="brush: scala"
  final case class ::[T](hd: T, tl: List[T]) extends List[T] {
    def head = hd
    def tail = tl
    override def isEmpty: Boolean = false
  }
}}}

`hd`是头一个元素，`tl`是其他的所有元素。上面的代码可以简化，直接由参数实现超类
`List`的`head`和`tail`方法：

{{{class="brush: scala"
  final case class ::[T](head: T, tail: List[T])
      extends List[T] {

    override def isEmpty: Boolean = false
  }
}}}

=== 其他的类方法 ===

{{{class="brush: scala"
  def length: Int = 
    if (isEmpty) 0 else 1 + tail.length

  def drop(n: Int): List[T] = 
    if (isEmpty) Nil
    else if (n <= 0) this
    else tail.drop(n - 1)

  def map[U](f: T => U): List[U] =
    if (isEmpty) Nil
    else f(head) :: tail.map(f)
}}}


=== 列表构建 ===

对于冒号结束的操作符`::`和`:::`，它们的操作都是绑定在右操作数上的。即：

{{{class="brush: scala"
x :: xs
}}}

被看作是：

{{{class="brush: scala"
xs.::(x)
}}}

因为`x`是列表元素可以是任意类型，所以不能假设它正好是具有`::`方法的
类型。也由于这个原因`::`方法应该生成一个新的列表。


还有值得讨论的地方是新加入元素的类型。思维惯性上会认为和列表元素是同一类型，但
实际上可用的范围更大。以下面的层级关系为例：

{{{class="brush: scala"
  abstract class Fruit 
  class Apple extends Fruit
  class Orange extends Fruit


  scala> val apples = new Apple :: Nil
  apples: List[Apple] = List(Apple@585fa9)

  scala> val fruits = new Orange :: apples
  fruits: List[Fruit] = List(Orange@cd6798, Apple@585fa9)
}}}

上面的例子说明新加入的元素可以产生超类类型的列表。实现这样弹性的`::`方法：

{{{class="brush: scala"
  def ::[U >: T](x: U): List[U] = new scala.::(x, this)
}}}

注意方法本身是多态的，类型参数是`U`，添加的元素类型必须是`U`，返回结果类型是
`List[U]`。而`[U >: T]`限定列表元素T的超类。

结合前面的例子，`U`被实例化为`Fruit`。因为`List[Apple]`中的`Apple`是`Fruit`的
子类，于是`U`的下界被满足。

<img src="images/scala/22.02.png" />

实际上对带有下界的`T`定义不只是为了方便，更加是为类型正确。因为`List`是协变的，
如果用下面的形式：

{{{class="brush: scala"
  // Error
  def ::(x: T): List[T] = new scala.::(x, this)
}}}

因为方法参数被认为是逆变位置，所以上面的列表元素类型`T`处于逆变位置。这样`List`
就不能被声明为`T`保持协变了。所以使用下界`[U >: T]`，即加强了类型检查，又让使用
更加有弹性。


=== 连接列表方法 ===

连接列表的实现方法差不多：

{{{class="brush: scala"
    def :::[U >: T](prefix: List[U]): List[U] = 
      if (prefix.isEmpty) this
      else prefix.head :: prefix.tail ::: this
}}}

因为`::`与`:::`是右关联的，所以下面四个语句其实相等：

{{{class="brush: scala"
  prefix.head :: prefix.tail ::: this
  prefix.head :: (prefix.tail ::: this)
  (prefix.tail ::: this).::(prefix.head)
  this.:::(prefix.tail).::(prefix.head)
}}}


== ListBuffer类 ==

列表的典型访问模式是递归，比如有一个让列表所有元素自加1的方法：

{{{class="brush: scala"
  def incAll(xs: List[Int]): List[Int] = xs match {
    case List() => List()
    case x :: xs1 => x + 1 :: incAll(xs1)
  }
}}}

这个方法有个问题：`incAll`是在`::`运算里面的，不是尾递归，堆栈的爆掉的危险。所以
要换个用循环的方案：

{{{class="brush: scala"
  for (x <- xs) // ??
}}}

那循环体内怎么写？前面的`incAll`递归方案可以通过加前缀操作；循环只能通过加后缀，
但`:::`操作时间与第一个列表长度成正比，效率很差：

{{{class="brush: scala"
  var result = List[Int]()    // a very inefficient approach
  for (x <- xs) result = result ::: List(x + 1)
  result
}}}

较好的办法是使用列表缓冲（list buffer）收集元素，最后用`toList`方法一次转换为
列表。

类`ListBuffer`位于`scala.collection.mutable`包中，而且它经过优化的增减操作与
`toList`操作都只要很短的常量时间就可以完成：

{{{class="brush: scala"
  import scala.collection.mutable.ListBuffer

  val buf = new ListBuffer[Int]
  for (x <- xs) buf += x + 1
  buf.toList
}}}


== 实际的List类实现 ==

虽然我们自己实现的`List`类很简洁，但实际上在遍历列表时为了避免递归一般都使用列表
缓冲与循环结合的方式。比如真正的`List`类是这样实现`map`方法的：

{{{class="brush: scala"
  final override def map[U](f: T => U): List[U] = {
    val b = new ListBuffer[U]
    var these = this
    while (!these.isEmpty) {
      b += f(these.head)
      these = these.tail
    }
    b.toList
  }
}}}

看了以上的代码后，大家可能会对最后`b.toList`的效率感兴趣。实际上它的效率与列表的
长度无关。关于原因可以看一下`::`类的实现：

{{{class="brush: scala"
  final case class ::[U](hd: U, 
      private[scala] var tl: List[U]) extends List[U] {

    def head = hd
    def tail = tl
    override def isEmpty: Boolean = false
  }
}}}

可以看到参数`tl`的类型是`var`，所以列表除了头一个元素以下的部分还是可以改变的。
而且修饰符`private[scala]`限定只有`scala`包中可以访问它。而修改它的是
`scala.collection.mutable`中的`ListBuffer`。

ListBuffer的元素被表示为列表，而添加新元素操作只对列表中最后一个`::`单元的`t1`
字段修改：

{{{class="brush: scala"
  package scala.collection.immutable
  final class ListBuffer[T] extends Buffer[T] {
    private var start: List[T] = Nil       // 所有元素的列表
    private var last0: ::[T] = _           // 最后一个 '::' 成员
    private var exported: Boolean = false  // 是否执行过toList操作
}}}

`toList`方法的实现也很简单。它返回由`start`指向的列表，如果列表非空，就设置
`exported`为`true`：

{{{class="brush: scala"
  override def toList: List[T] = {
    exported = !start.isEmpty
    start
  }
}}}

`toList`返回的列表应该是不可变的实例。那如果在这以后又被添加了元素的话，就不得不
改变`start`指向的列表。所以为了维护正确性，由`+=`方法转向对一个新列表进行操作：

{{{class="brush: scala"
  override def += (x: T) {
    if (exported) copy()
    if (start.isEmpty) {
      last0 = new scala.::(x, Nil)
      start = last0
    } else {
      val last1 = last0
      last0 = new scala.::(x, Nil)
      last1.tl = last0
    }
  }
}}}

上面的逻辑中可以看出，如果没有被`toList`过，还可以在原来的列表上修改。如果已经
生成过列表了，那复制操作就不可避免。


== 外在的函数式风格 ==

回顾本章的内容可以感受到：指使式方案可以避免重复复制以提高效率；函数式风格以不可
改变与不共享数据让程序变得更加可靠。

Scala官方的实现方式让程序在外部看来是函数式，而内部实现在不得已的情况下使用
指令式实现。这样的实现可以被称作“外在函数式风格”。




= 重温for表达式 =

先讨论一个例子，`Person`类有名字，性别，孩子三个成员：

{{{class="brush: scala"
  case class Person(name: String, isMale: Boolean, children: Person*)
}}}

根据这个类建立一些实例：

{{{class="brush: scala"
  val lara = Person("Lara", false)
  val bob = Person("Bob", true)
  val julie = Person("Julie", false, lara, bob)
  val persons = List(lara, bob, julie)
}}}

如果要找出所有母亲与孩子的结对，方案一是使用`map`、`flatMap`和`filter`这样的高阶
函数组成这样的查询操作：

{{{class="brush: scala"
  scala> persons filter (p => !p.isMale) flatMap (p =>
       |     (p.children map (c => (p.name, c.name))))
  res5: List[(String, String)] = List((Julie,Lara),
      (Julie,Bob))
}}}

上面的代码很看起来挺难理解的，用for表达式来实现另一个版本：

{{{class="brush: scala"
  scala> for (p <- persons; if !p.isMale; c <- p.children) 
       | yield (p.name, c.name)
  res6: List[(String, String)] = List((Julie,Lara),
      (Julie,Bob))
}}}

for循环比高阶函数可读性更加好一些。但实际上Scala编译器把循环版本转为高阶函数版本
：

* 所有有`yield`结果的for表达式会被转为`map`、`flatMap`与`filter`组合的调用。
* 所有无`yield`结果的for表达式被转为`filter`与`foreach`的调用。


== For表达式 ==

for表达式的一般形式：

{{{class="brush: scala"
  for ( seq ) yield expr
}}}

其中的`seq`部分由生成器、定义、过滤器组成，以分号分隔：

{{{class="brush: scala"
  for (p <- persons; n = p.name; if (n startsWith "To")) 
  yield n
}}}

小括号可以由大括号代替，并且在用大括号的情况下还能省略分号：

{{{class="brush: scala"
  for {
    p <- persons              // 生成器
    n = p.name                // 定义
    if (n startsWith "To")    // 过滤器
  } yield n
}}}

如果有多个生成器，后面的生成器在内层的循环：

{{{class="brush: scala"
  scala> for (x <- List(1, 2); y <- List("one", "two")) 
       | yield (x, y)
  res0: List[(Int, java.lang.String)] = 
    List((1,one), (1,two), (2,one), (2,two))
}}}

== 8皇后问题 ==

8皇后问题：标准棋盘上放8个皇后，相互之间不能处理叫吃的位置上（同行、同列、
同对角线）。

对于这个问题，把它扩展为任意尺寸的棋盘：在N*N的棋盘上放N个皇后，反而更加简单。设
左上角的坐标是(1,1)，右下角是(N,N)。

定义好了问题以后再看解决方案：

同一行的会被叫吃，所以每行只能放一个。那就一行一行地放皇后并检查会不会被叫吃。在
处理过程中还会遇到第K行的皇后把从`1`到`k-1`行的皇后全都叫吃的局面，这时就要放弃
这部分操作继续另外一种从1到k-1行皇后的配置方案。

另外一个方案更加具有函数式风格：

穷举出所有在`N*N`棋盘上放`k`个皇后的方案`0<k<N`。那么每个方案都可以用长度的`k`的
列表表示，为了处理方便顺序要按堆栈的方式把第k行在最顶层，`k-1`到`k`行依次向下。
所有的堆栈在一起组成了所有解决方案的列表。

现在我们把在第`k+1`行放皇后的操作变为对前一个方案多加一个皇后的所有可能的扩展。
这会产一个长度为`k+1`的列表。

下面的`placeQueens`函数实现了这一算法：

{{{class="brush: scala"
  def queens(n: Int): List[List[(Int, Int)]] = {
    def placeQueens(k: Int): List[List[(Int, Int)]] =
      if (k == 0) 
        List(List())
      else 
        for {
          queens <- placeQueens(k - 1)
          column <- 1 to n
          queen = (k, column)
          if isSafe(queen, queens) 
        } yield queen :: queens

    placeQueens(n)
  }
}}}

两个生成器：

* `queens <- placeQueens(k - 1)`遍历所有行（递归调用）。
* `column <- 1 to n`遍历所有列。

过滤器来检查有没有叫吃情况发生：

{{{class="brush: scala"
  def isSafe(queen: (Int, Int), queens: List[(Int, Int)]) = 
    queens forall (q => !inCheck(queen, q))

  def inCheck(q1: (Int, Int), q2: (Int, Int)) = 
    q1._1 == q2._1 ||                          // 同一行
    q1._2 == q2._2 ||                          // 同一列
    (q1._1 - q2._1).abs == (q1._2 - q2._2).abs // 对角线
}}}


== 使用for表达式进行查询 ==

模拟一个查找图书的应用：

{{{class="brush: scala"
  case class Book(title: String, authors: String*)

  val books: List[Book] =
    List(
      Book(
        "Structure and Interpretation of Computer Programs",
        "Abelson, Harold", "Sussman, Gerald J."
      ),
      Book(
        "Principles of Compiler Design",
        "Aho, Alfred", "Ullman, Jeffrey"
      ),
      Book(
        "Programming in Modula-2",
        "Wirth, Niklaus"
      ),
      Book(
        "Elements of ML Programming",
        "Ullman, Jeffrey"
      ),
      Book(
        "The Java Language Specification", "Gosling, James",
        "Joy, Bill", "Steele, Guy", "Bracha, Gilad"
      )
    )
}}}

查找作者姓“Gosling”的书名：

{{{class="brush: scala"
  scala> for (b <- books; a <- b.authors
       |      if a startsWith "Gosling")
       | yield b.title
  res0: List[String] = List(The Java Language Specification)
}}}

查找书名含“Program”：

{{{class="brush: scala"
  scala> for (b <- books if (b.title indexOf "Program") >= 0)
       | yield b.title
  res4: List[String] = List(Structure and Interpretation of
    Computer Programs, Programming in Modula-2, Elements
      of ML Programming)
}}}

查找编写了两本书以上的作者：

{{{class="brush: scala"
  scala> for (b1 <- books; b2 <- books if b1 != b2;
       |     a1 <- b1.authors; a2 <- b2.authors if a1 == a2)
       | yield a1
  res5: List[String] = List(Ullman, Jeffrey, Ullman, Jeffrey)
}}}

上面的代码有缺陷，同一个作者会出现多次。下面的代码完成去重：

{{{class="brush: scala"
  scala> def removeDuplicates[A](xs: List[A]): List[A] = {
       |   if (xs.isEmpty) xs
       |   else
       |     xs.head :: removeDuplicates(
       |       xs.tail filter (x => x != xs.head)
       |     )
       | }
  removeDuplicates: [A](List[A])List[A]

  scala> removeDuplicates(res5)
  res6: List[java.lang.String] = List(Ullman, Jeffrey)
}}}

最后一个表达式可以使用for表达式表现为：

{{{class="brush: scala"
   xs.head :: removeDuplicates(
     for (x <- xs.tail if x != xs.head) yield x
   )
}}}

== for表达式的转译 ==

每个for表达式都可以换成`map`、`flatMap`、`filter`这三个高阶的形式表达。

=== 简单变量生成器 ===

`x <- exp1`这种生成器生成到简单变量的情况下，大概有三种情况。

==== 一个生成器 ====

{{{class="brush: scala"
for (x <- exp1) yield exp2
}}}

相当于：

{{{class="brush: scala"
exp1 .map(x => exp2)
}}}

==== 以一个生成器和过滤器载开头 ====

{{{class="brush: scala"
for (x <- exp1 if exp2) yield exp3
}}}

相当于：

{{{class="brush: scala"
for (x <- exp1 filter(x => exp2)) yield exp3
}}}

相当于：

{{{class="brush: scala"
exp1 filter (x => exp2) map (x => exp3)
}}}

如果过滤器后有更多的元素同理。设`seq`为任意序列生成器、定义或过滤器，则：

{{{class="brush: scala"
for (x <- exp1 if exp2 ; seq) yield exp3
}}}

相当于：

{{{class="brush: scala"
for (x <- exp1 filter exp2 ; seq) yield exp3
}}}

==== 以两个生成器开始 ====

{{{class="brush: scala"
for (x <- exp1 ; y <- exp2 ; seq) yield exp3
}}}

设`seq`为任意序列生成器、定义或过滤器。则相当于`flatMap`的应用：

{{{class="brush: scala"
exp1 .flatMap(x => for (y <- exp2 ; seq) yield exp3)
}}}

==== 组合应用生成变量的例子 ====

组合上面三种情况来处理“找出所有出版过至少两本书的作者”：

{{{class="brush: scala"
for (b1 <- books; b2 <- books if b1 != b2;
     a1 <- b1.authors; a2 <- b2.authors if a1 == a2)
yield a1
}}}

相当于：

{{{class="brush: scala"
books flatMap (b1 =>
  books filter (b2 => b1 != b2) flatMap (b2 =>
    b1.authors flatMap (a1 =>
      b2.authors filter (a2 => a1 == a2) map (a2 =>
        a1))))
}}}

=== 生成器转译中的模式 ===

如果生成器不是`x <- expq`这样生成到简单变量`x`的情况。转译起来就麻烦了。

==== 变量元组 ====

这种情况还简单，看起来像变量差不多。

{{{class="brush: scala"
for ((x1, ..., xn) <- exp1) yield exp2
}}}

相当于：

{{{class="brush: scala"
exp1 .map { case(x1, ..., xn) => exp2 }
}}}

==== 单个模式匹配的情况 ====

单个模式匹配的情况下：

{{{class="brush: scala"
for (pat <- exp1) yield exp2
}}}

相当于：

{{{class="brush: scala"
exp1 filter {
	case pat => true
	case _   => false
} map {
	case pat => exp2
}
}}}

基本思路是只有匹配于`pat`的情况才会被映射，所以也保证了模式匹配不会抛出
`MatchError`。

注意这只在单个模式匹配的情况下讨论。其他的情况参考Scala语言规格书“Ode08”。


=== 多层内嵌定义 ===

{{{class="brush: scala"
for (x <- exp1; y = exp2; seq) yield exp3
}}}

设`seq`为任意序列生成器、定义或过滤器。上面相当于：

{{{class="brush: scala"
for((x,y) <- for (x <- exp1) yield (x, exp2); seq) yield exp3
}}}

因为`exp2`用到了`x`所以每次产`x`的时候`exp2`要重新计算。这样浪费了性能，所以：


{{{class="brush: scala"
  for (x <- 1 to 1000; y = expensiveComputationNotInvolvingX)
  yield x * y
}}}

更好的写法是：

{{{class="brush: scala"
  val y = expensiveComputationNotInvolvingX
  for (x <- 1 to 1000) yield x * y
}}}

=== 没有返回值的情况 ===

前面描述了通过`yield`生成值的情况。在不产值的情况下一般更简单，只要`foreach`：

{{{class="brush: scala"
for (x <- exp1) body
}}}

相当于：

{{{class="brush: scala"
exp1 foreach (x => body)
}}}

更加复杂的情况：

{{{class="brush: scala"
for (x <- exp1 ; if exp2 ; y <- exp3) body
}}}

相当于：

{{{class="brush: scala"
exp1 filter (x => exp2) foreach (
	x => exp3 foreach (y => body)
)
}}}

例子，把列表形式的矩阵所有元素累加在一起：

{{{class="brush: scala"
  var sum = 0
  for (xs <- xss; x <- xs) sum += x
}}}

相当于：

{{{class="brush: scala"
  var sum = 0
  xss foreach (xs => 
    xs foreach (x =>
      sum += x))
}}}

== 把高阶函数转为for循环 ==

下面的三个函数是用for循环分别实现`map`、`flatMap`、`filter`的演示：

{{{class="brush: scala"
  object Demo {
    def map[A, B](xs: List[A], f: A => B): List[B] =
      for (x <- xs) yield f(x)

    def flatMap[A, B](xs: List[A], f: A => List[B]): List[B] =
      for (x <- xs; y <- f(x)) yield y

    def filter[A](xs: List[A], p: A => Boolean): List[A] =
      for (x <- xs if p(x)) yield x
  }
}}}

== for的应用 ==

for表达式的实现是基于`map`、`flatMap`、`filter`这些高阶函数。所以可以把for用在
大批量数据上。for可以应用在数组和列表上也是因为这些这两个数组结构实现了这三个
高阶函数，其实可用的还有范围（Range）、迭代器（Iterator）、流（Stream）还有集
（Set）。

如果没有实现那三个方法的话要实现以后才能使用for，具体规则为：

* 有`map`可以用单一生成器。
* 有`flatMap`和`map`可以有多个生成器。
* 有`foreach`可以有单一或多个生成器。
* 有`filter`可以有过滤器。

设一个集合类`C`，典型的方法签名：

{{{class="brush: scala"
  abstract class C[A] {
    def map[B](f: A => B): C[B]
    def flatMap[B](f: A => C[B]): C[B]
    def filter(p: A => Boolean): C[A]
    def foreach(b: A => Unit): Unit
  }
}}}

注意：对于参数类型`A`，方法返回的结果类型为有可能是`A`、`B`或`Unit`。

函数式编程里个概念叫单体（monad）有很广泛地应用，包括从集合、IO操作、状态操作、
回溯计算及交易等。`map`、`flatMap`、`filter`这三个方法可以用来定制单体功能。





