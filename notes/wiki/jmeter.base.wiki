
%title 基础

%toc 基础

= 基础 =

== 性能测试主要分类 ==

负载测试（Load Testing） :: 确保系统在超过最大预计工作量时也能正常运行。
压力测试（Stress Testing） :: 不断施加压力，观察系统状况，赶到出现瓶颈或崩溃。
容量测试（Volume Testing） :: 确定系统可处理同时在线最大用户数。

== 性能测试主要指标 ==

基本指标：CPU占用率、内存占用率、数据库连接池。

=== B-S架构普遍关注 ===

Avg Rps :: 平均每秒响应次数 =  总请求次数 / 秒数。
Avg time to last byte per terstion（mstes） :: 平均每少业务脚本迭代次数。
Successful Rounds :: 成功请求。
Failed Rounds :: 失败的请求。
Successful Hits :: 成功点击次数。
Failed Hits :: 失败的点击次数。
Successful Hits Per Second :: 每秒成功点击次数。
Failed Hits Per Second :: 每秒失败的点击次数。
Attempted Connections :: 尝试连接数。
Throughtput :: 吞吐率。

=== C-S架构普遍关注 ===

User Connections :: 用户连接数。
Number of Deadlocks :: 数据库死锁。
Butter Cache Hit :: 数据库缓存命中情况。

== 性能测试基本方案 ==

=== 响应时长 ===

| 关键功能 | 平均使用次数 | 平均用户数 | 高峰时段用户数 | 平均响应时长 | 要接受最长响应时长 | 使用时间段   |
|----------|--------------|------------|----------------|--------------|--------------------|--------------|
| XXX 功能 |              | 20,000     | 23,000         | < 4s         | <= 7s              | 8:00 ~ 21:00 |
| XXX 功能 |              | 20,000     | 23,000         | < 4s         | <= 7s              | 8:00 ~ 21:00 |
| XXX 功能 |              | 20,000     | 23,000         | < 4s         | <= 7s              | 8:00 ~ 21:00 |
| XXX 功能 |              | 20,000     | 23,000         | < 4s         | <= 7s              | 8:00 ~ 21:00 |
| XXX 功能 |              | 20,000     | 23,000         | < 4s         | <= 7s              | 8:00 ~ 21:00 |

=== 测试环境指标折算 ===

{{$
测试环境平均并发数 = 
\frac{
	最大在线人数 \times 1.1 
}{
	\frac{生产环境机器数}{测试环境机器数} \times 
	\frac{生产环境内存}{测试环境内存} 
}
}}$

每秒增加5个用户，直到达到平均并发数量。然后再持续运行几个小时。

=== 后台监控 ===

| 监控对象     | 指标         | 工具     |
|--------------|--------------|----------|
| 应用服务器   | CPU、MEM、IO | openview |
| 数据库服务器 | CPU、MEM、IO | openview |
| 数据库       | TOP、SQL等   | APM      |
| 中间件       | 队列         | Console  |

=== 测试通过标准 ===

# 平均响应时长满足测试指标要求。
# 90%响应时长满足测试指标要求。
# 2小时压力测试中脚本没有出错。

== JMeter概览 ==

=== 主要工具 ===

* Test Plan（测试计划）：整个的测试脚本。
* Thread Group（线程组）：模拟一组用户，大家都用同样的测试脚本。
* WorkBench（工作台）：暂时不用的测试元素，不会在保存测试计划时一起被保存。
* Configuration Elements（配置元素）：存放测试脚本的共享信息。
* Samplers（采样器）：发请求到服务器。
* Pre-Processors（前置定时器）：采样器执行前。
* Post-Processors（后置定时器）：采样器执行后。
* Logic Controllers（逻辑控制器）：控制执行顺序。
* Listener（监听器）：收集测试结果。
* Assertions（断言）：判断返回结果是否符合预期。
* Timers（定时器）。

=== 主要结果字段 ===

* Label：HTTP请求的名称。
* Samples：本次测试中一共发了多少请求。
* Average：请求或事务的平均时长。
* Median：中位数（50%用户）的响应时长。
* 90% Line：90%用户的响应时长。
* Min：最小时长。
* Max：最大时长。
* Error %：错误率。
* Throughput：每秒完成的请求或事务数量。
* KB/Sec：每秒收到的数据量。

=== 配置 ===

JVM参数在`bin/jmeter.bat`或`bin/jmeter.sh`中配置。`HEAP`大小默认`512m`，根据经验
最大不要超过物理内存的一半。不然运行速度会变慢甚至内存溢出。

日志级别调整在`jmeter.properties`中的`log_level.jmeter=INFO`。

以上属性也可以在GUI中设置：

<img src='images/jmeter/0204.png' />

=== 文档 ===

* `docs`目录下是Java Docs。
* `printable_docs/usermanual`用户手册。
	- `component_reference.html`是最常用的核心组件。

=== Ant支持 ===

`extras`目录下提供了Ant构造支持。JMeter把测试数据生成的`.jtl`文件放到`extras`
目录下，运行：

{{{class="brush: bash"
ant -Dtest=data.jtl report
}}}

生成测试统计报表。

如果用户有自己扩展包，直接放`lib`下。

== 运行JMeter ==

Windows下：

* `jmeter.bat`：GUI启动
* `jmeter-t.cmd`：加载JMX文件，GUI
* `jmeter-n.cmd`：加载JMX文件，非GUI
* `jmeter-n-r.cmd`：加载JMX文件，非GUI，远程
* `jmeter-server.bat`：服务器模式
* `mirror-server.cmd`：镜像服务器，非GUI
* `shutdown.cmd`：关闭非GUI实例（优雅地）
* `stoptest.cmd`：关闭非GUI实例（中断式）

添加启动参数：

{{{class="brush: bash"
set JVM_ARGS="-Xms1024m -Xmx1024m =Dpropname=propvalue"
jmeter -t test.jmx ...
}}}

Unix下：

* `jmeter`：GUI启动
* `jmeter.sh`：GUI启动，不带JVM参数
* `jmeter-server`：服务器模式
* `mirror-server.sh`：镜像服务器，非GUI
* `shutdown.sh`：关闭非GUI实例（优雅地）
* `stoptest.sh`：关闭非GUI实例（中断式）

添加启动参数：

{{{class="brush: bash"
JVM_ARGS="-Xms1024m -Xmx1024m =Dpropname=propvalue"
jmeter -t test.jmx ...
}}}

=== classpath ===

* `lib`：公用包，如测试数据库的JDBC驱动，测试JMS的类。
* `lib\ext`：JMeter核心类库、组件与补丁都放在下。如果自己写的扩展组件也放这里。
	如果不想把扩展包放在这里，就要在`jmeter.properties`文件中定义`search_paths`。
	这里只放JMeter用的组件，不要放公用包。
* `lib\junit`：Junit脚本。
* `$JAVA_HOME/jre/lib/ext`下的公用包。
* `jmeter.properties`中定义`user.classpath`属性。

注意：

* 其他以“java-jar”方式启动的方式一样，JMeter会忽视`CLASSPATH`变量。要在另外
	在`-jar`的`-classpath`或`-cp`中指定。
* JMeter只查找jar，忽略zip。




{{{class="brush: bash"
}}}

{{{class="brush: bash"
}}}

{{{class="brush: bash"
}}}

{{{class="brush: bash"
}}}

{{{class="brush: bash"
}}}

{{{class="brush: bash"
}}}

{{{class="brush: bash"
}}}
