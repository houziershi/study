%title HTML文档

%toc HTML文档


= HTML声明 =

== 常用的声明 ==

HTML5

{{{class="brush: html"
<!DOCTYPE html>
}}}

HTML 4.01

{{{class="brush: html"
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
}}}

XHTML 1.0

{{{class="brush: html"
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
}}}

=== HTML DOCTYPE ===

HTML 文档是根据文档类型声明进行验证的。如果希望 HTML 文件被正确地验证，就要将恰当的 DTD 添加到文件的第一行。

HTML 4.01 Strict DTD 包含没有被反对使用或者不出现在框架中的元素和属性：

{{{class="brush: html"
<!DOCTYPE HTML PUBLIC
"-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">
}}}

HTML 4.01 Transitional DTD 包含 strict DTD 中所有的内容，外加被反对使用的元素和属性：

{{{class="brush: html"
<!DOCTYPE HTML PUBLIC
"-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
}}}

HTML 4.01 Frameset DTD 包含 transitional DTD 中所有的内容，外加对框架的支持：

{{{class="brush: html"
<!DOCTYPE HTML PUBLIC
"-//W3C//DTD HTML 4.01 Frameset//EN"
"http://www.w3.org/TR/html4/frameset.dtd">
}}}

== 头部 ==

| 标签       | 描述                                     |
|------------|------------------------------------------|
| `<head>`   | 定义关于文档的信息。                     |
| `<title>`  | 定义文档标题。                           |
| `<base>`   | 定义页面上所有链接的默认地址或默认目标。 |
| `<link>`   | 定义文档与外部资源之间的关系。           |
| `<meta>`   | 定义关于 HTML 文档的元数据。             |
| `<script>` | 定义客户端脚本。                         |
| `<style>`  | 定义文档的样式信息。                     |

=== base ===

<base> 标签为页面上的所有链接规定默认地址或默认目标（target）：

{{{class="brush: html"
<head>
<base href="http://www.w3school.com.cn/images/" />
<base target="_blank" />
</head>
}}}

=== meta ===

下面的 meta 元素定义页面的描述：

{{{class="brush: html"
<meta name="description" content="Free Web tutorials on HTML, CSS, XML" />
}}}

下面的 meta 元素定义页面的关键词：

{{{class="brush: html"
<meta name="keywords" content="HTML, CSS, XML" />
}}}

==== 必填属性 ====

| 属性    | 值        | 描述                                       |
|---------|-----------|--------------------------------------------|
| content | some_text | 定义与 http-equiv 或 name 属性相关的元信息 |

==== 可选属性 ====

| 属性       | 值           | 描述                                |
|------------|--------------|-------------------------------------|
| http-equiv | content-type | 把 content 属性关联到 HTTP 头部。   |
| \/         | expires      | \/                                  |
| \/         | refresh      | \/                                  |
| \/         | set-cookie   | \/                                  |
| name       | author       | 把 content 属性关联到一个名称。     |
| \/         | description  | \/                                  |
| \/         | keywords     | \/                                  |
| \/         | generator    | \/                                  |
| \/         | revised      | \/                                  |
| \/         | others       | \/                                  |
| scheme     | some_text    | 定义用于翻译 content 属性值的格式。 |

http-equiv 属性 

http-equiv 属性为名称/值对提供了名称。并指示服务器在发送实际的文档之前先在要传送
给浏览器的 MIME 文档头部包含名称/值对。

使用带有`http-equiv`属性的`<meta>`标签时，服务器将把名称/值对添加到发送给浏览器
的内容头部。例如，添加：

{{{class="brush: html"
<meta http-equiv="charset" content="iso-8859-1">
<meta http-equiv="expires" content="31 Dec 2008">
}}}

这样发送到浏览器的头部就应该包含：

{{{class="brush: html"
content-type: text/html
charset:iso-8859-1
expires:31 Dec 2008
}}}

当然，只有浏览器可以接受这些附加的头部字段，并能以适当的方式使用它们时，这些字段才有意义。


= 布局 =

大多数 HTML 元素被定义为块级元素或内联元素。

* “块级元素”译为 block level element，
* “内联元素”译为 inline element。
 
HTML 块级元素 :: 块级元素在浏览器显示时，通常会以新行来开始（和结束）。

例子：`<div>，<h1>, <p>, <ul>, <table>`

HTML 内联元素 :: 内联元素在显示时通常不会以新行开始。

例子：`<span>，<b>, <td>, <a>, <img>`

= 元素介绍 =

== 布局元素 ==

=== div ===

简单的排版：

<img src="images/html/html_layout_div.gif" />

代码：

{{{class="brush: html"
<!DOCTYPE html>
<html>
<head>
<style type="text/css">
	div#container{width:500px}
	div#header {background-color:#99bbbb;}
	div#menu {background-color:#ffff99; height:200px; width:100px; float:left;}
	div#content {background-color:#EEEEEE; height:200px; width:400px; float:left;}
	div#footer {background-color:#99bbbb; clear:both; text-align:center;}
	h1 {margin-bottom:0;}
	h2 {margin-bottom:0; font-size:14px;}
	ul {margin:0;}
	li {list-style:none;}
</style>
</head>
<body>

	<div id="container">
	
		<div id="header">
			<h1>Main Title of Web Page</h1>
		</div>
		
		<div id="menu">
			<h2>Menu</h2>
			<ul>
				<li>HTML</li>
				<li>CSS</li>
				<li>JavaScript</li>
			</ul>
		</div>
		
		<div id="content">Content goes here</div>
		
		<div id="footer">Copyright W3School.com.cn</div>
		
	</div>

</body>
</html>
}}}

= HTML文本 =

== 字体相关 ==

=== div ===

定义文档中的节或区域（块级）。

=== span ===

定义文档中的行内的小块或区域。

=== 超链接 ===

有两种使用`<a>`标签的方式：

# 通过使用 href 属性 - 创建指向另一个文档的链接
# 通过使用 name 属性 - 创建文档内的书签

==== name 属性 ====

name 属性规定锚（anchor）的名称。您可以使用 name 属性创建 HTML 页面中的书签。
书签不会以任何特殊方式显示，它对读者是不可见的。

当使用命名锚（named anchors）时，我们可以创建直接跳至该命名锚（比如页面中某个
小节）的链接，这样使用者就无需不停地滚动页面来寻找他们需要的信息了。

命名锚的语法：

{{{class="brush: html"
<a name="label">锚（显示在页面上的文本）</a>
}}}

提示：锚的名称可以是任何你喜欢的名字。您可以使用 id 属性来替代 name 属性命名。 

实例

首先，我们在 HTML 文档中对锚进行命名（创建一个书签）：

{{{class="brush: html"
<a name="tips">基本的注意事项 - 有用的提示</a>
}}}

然后，我们在同一个文档中创建指向该锚的链接：

{{{class="brush: html"
<a href="#tips">有用的提示</a>
}}}

您也可以在其他页面中创建指向该锚的链接：

{{{class="brush: html"
<a href="http://www.w3school.com.cn/html/html_links.asp#tips">有用的提示</a>
}}}

在上面的代码中，我们将 # 符号和锚名称添加到 URL 的末端，就可以直接链接到 tips 这个命名锚了。

==== 包围图像作为超链接 ====

{{{class="brush: html"
<a href="/example/html/lastpage.html">
<img border="0" src="/i/eg_buttonnext.gif" />
</a>
}}}

==== 没有下划线 ====

{{{class="brush: html"
<a href="/example/html/lastpage.html" style="text-decoration:none">
这是一个链接！
</a>
}}}


=== 文本格式化标签 ===

| 标签       | 描述                                |
|------------|-------------------------------------|
| `<b>`      | 定义粗体文本。                      |
| `<big>`    | 定义大号字。                        |
| `<em>`     | 定义着重文字。                      |
| `<i>`      | 定义斜体字。                        |
| `<small>`  | 定义小号字。                        |
| `<strong>` | 定义加重语气。                      |
| `<sub>`    | 定义下标字。                        |
| `<sup>`    | 定义上标字。                        |
| `<ins>`    | 定义插入字。                        |
| `<del>`    | 定义删除字。                        |
| `<s>`      | 不赞成使用。使用 <del> 代替。       |
| `<strike>` | 不赞成使用。使用 <del> 代替。       |
| `<u>`      | 不赞成使用。使用样式（style）代替。 |

=== “计算机输出”标签 ===

| 标签          | 描述                          |
|---------------|-------------------------------|
| `<code>`      | 定义计算机代码。              |
| `<kbd>`       | 定义键盘码。                  |
| `<samp>`      | 定义计算机代码样本。          |
| `<tt>`        | 定义打字机代码。              |
| `<var>`       | 定义变量。                    |
| `<pre>`       | 定义预格式文本。              |
| `<listing>`   | 不赞成使用。使用 <pre> 代替。 |
| `<plaintext>` | 不赞成使用。使用 <pre> 代替。 |
| `<xmp>`       | 不赞成使用。使用 <pre> 代替。 |

=== 引用、引用和术语定义 ===

| 标签           | 描述               |
|----------------|--------------------|
| `<abbr>      ` | 定义缩写。         |
| `<acronym>   ` | 定义首字母缩写。   |
| `<address>   ` | 定义地址。         |
| `<bdo>       ` | 定义文字方向。     |
| `<blockquote>` | 定义长的引用。     |
| `<q>         ` | 定义短的引用语。   |
| `<cite>      ` | 定义引用、引证。   |
| `<dfn>       ` | 定义一个定义项目。 |

==== 文字方向 ====

如果您的浏览器支持 bi-directional override (bdo)，下一行会从右向左输出 (rtl)：

{{{class="brush: html"
<bdo dir="rtl">
Here is some Hebrew text
</bdo>
}}}

=== img 图像 ===

==== 垂直位置 ====

图像在一行文本中的垂直对齐方式：

{{{class="brush: html"
<p>图像 <img src="/i/eg_cute.gif" align="bottom"> 在文本中</p>

<p>图像 <img src ="/i/eg_cute.gif" align="middle"> 在文本中</p>

<p>图像 <img src ="/i/eg_cute.gif" align="top"> 在文本中</p>
}}}


=== 表格 ===

| 资产 | 现金     | 随身     |
| \/   | \/       | 备用     |
| \/   | 存款     | 浦发     |
| \/   | \/       | 光大     |
| 负债 | 短期借款 | 他人代付 |

== 列表 ==

=== 无序列表 ===

`ol>li`

{{{class="brush: html"
<h4>Disc 项目符号列表：</h4>
<ul type="disc">
 <li>苹果</li>
 <li>香蕉</li>
 <li>柠檬</li>
 <li>桔子</li>
</ul>  

<h4>Circle 项目符号列表：</h4>
<ul type="circle">
 <li>苹果</li>
 <li>香蕉</li>
 <li>柠檬</li>
 <li>桔子</li>
</ul>  

<h4>Square 项目符号列表：</h4>
<ul type="square">
 <li>苹果</li>
 <li>香蕉</li>
 <li>柠檬</li>
 <li>桔子</li>
</ul>  
}}}

=== 有序列表 ===

`ul>li`

{{{class="brush: html"
<h4>数字列表：</h4>
<ol>
 <li>苹果</li>
 <li>香蕉</li>
 <li>柠檬</li>
 <li>桔子</li>
</ol>  

<h4>字母列表：</h4>
<ol type="A">
 <li>苹果</li>
 <li>香蕉</li>
 <li>柠檬</li>
 <li>桔子</li>
</ol>  

<h4>小写字母列表：</h4>
<ol type="a">
 <li>苹果</li>
 <li>香蕉</li>
 <li>柠檬</li>
 <li>桔子</li>
</ol>  

<h4>罗马字母列表：</h4>
<ol type="I">
 <li>苹果</li>
 <li>香蕉</li>
 <li>柠檬</li>
 <li>桔子</li>
</ol>  

<h4>小写罗马字母列表：</h4>
<ol type="i">
 <li>苹果</li>
 <li>香蕉</li>
 <li>柠檬</li>
 <li>桔子</li>
</ol>  
}}}

=== 定义列表 ===

{{{class="brush: html"
<dl>
   <dt>计算机</dt>
   <dd>用来计算的仪器 ... ...</dd>
   <dt>显示器</dt>
   <dd>以视觉方式显示信息的装置 ... ...</dd>
</dl>
}}}

=== 字体 ===

| 属性                | 例子            | 作用             |
|---------------------|-----------------|------------------|
| size="number"       | size="2"        | 定义字体大小。   |
| size="+number"      | size="+1"       | 增加字体的大小。 |
| size="-number"      | size="-1"       | 减少字体的大小。 |
| face="face-name"    | face="Times"    | 定义字体名称。   |
| color="color-value" | color="#eeff00" | 定义字体颜色。   |
| color="color-name"  | color="red"     | 定义字体颜色。   |

例子

{{{class="brush: html"
<p style="font-family:verdana;font-size:80%;color:green">
This is a paragraph with some text in it. This is a paragraph with some text in
it. This is a paragraph with some text in it. This is a paragraph with some 
text in it.
</p>
}}}


