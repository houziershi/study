%title MySQL优化
%toc MySQL优化

= 批量插入 =

== 一条SQL语句插入多条数据。 ==

常用的插入语句如：

{{{class="brush: sql"
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
    VALUES ('0', 'userid_0', 'content_0', 0);
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
    VALUES ('1', 'userid_1', 'content_1', 1);
}}}

修改成：

{{{class="brush: sql"
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
    VALUES ('0', 'userid_0', 'content_0', 0), ('1', 'userid_1', 'content_1', 1);
}}}

修改后的插入操作能够提高程序的插入效率。这里第二种SQL执行效率高的主要原因是合并
后日志量（MySQL的binlog和innodb的事务让日志）减少了，降低日志刷盘的数据量和频率
，从而提高效率。通过合并SQL语句，同时也能减少SQL语句解析的次数，减少网络传输的
IO。

== 在事务中进行插入处理 ==

把插入修改成：

{{{class="brush: sql"
START TRANSACTION;
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
    VALUES ('0', 'userid_0', 'content_0', 0);
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
    VALUES ('1', 'userid_1', 'content_1', 1);
...
COMMIT;
}}}

使用事务可以提高数据的插入效率，这是因为进行一个INSERT操作时，MySQL内部会建立一
个事务，在事务内才进行真正插入处理操作。通过使用事务可以减少创建事务的消耗，所有
插入都在执行后才进行提交操作。

== 数据有序插入 ==

数据有序的插入是指插入记录在主键上是有序排列，例如`datetime`是记录的主键：

{{{class="brush: sql"
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
    VALUES ('1', 'userid_1', 'content_1', 1);
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
    VALUES ('0', 'userid_0', 'content_0', 0);
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
    VALUES ('2', 'userid_2', 'content_2',2);
}}}

修改成：

{{{class="brush: sql"
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
    VALUES ('0', 'userid_0', 'content_0', 0);
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
    VALUES ('1', 'userid_1', 'content_1', 1);
INSERT INTO `insert_table` (`datetime`, `uid`, `content`, `type`)
    VALUES ('2', 'userid_2', 'content_2',2);
}}}

由于数据库插入时，需要维护索引数据，无序的记录会增大维护索引的成本。我们可以参照
innodb使用的B+tree索引，如果每次插入记录都在索引的最后面，索引的定位效率很高，
并且对索引调整较小；如果插入的记录在索引中间，需要B+tree进行分裂合并等处理，会
消耗比较多计算资源，并且插入记录的索引定位效率会下降，数据量较大时会有频繁的磁盘
操作。

从测试结果来看，该优化方法的性能有所提高，但是提高并不是很明显。

== 性能综合测试 ==

这里提供了同时使用上面三种方法进行INSERT效率优化的测试。

从测试结果可以看到，合并数据+事务的方法在较小数据量时，性能提高是很明显的，数据
量较大时（1千万以上），性能会急剧下降，这是由于此时数据量超过了`innodb_buffer`的
容量，每次定位索引涉及较多的磁盘读写操作，性能下降较快。而使用合并数据+事务+有序
数据的方式在数据量达到千万级以上表现依旧是良好，在数据量较大时，有序数据索引定位
较为方便，不需要频繁对磁盘进行读写操作，所以可以维持较高的性能。

== 注意事项 ==

1. SQL语句是有长度限制，在进行数据合并在同一SQL中务必不能超过SQL长度限制，通过
`max_allowed_packet`配置可以修改，默认是1M，测试时修改为8M。

2. 事务太大可能会影响执行的效率。MySQL有`innodb_log_buffer_size`配置项，超过这个
值会把innodb的数据刷到磁盘中，这时，效率会有所下降。所以比较好的做法是，在数据
达到这个这个值前进行事务提交。
