
%title Javascript

%toc Javascript

= 效率问题 =

== JS自身的效率 ==

=== 全局导入 ===

我们在编码过程中多多少少会使用到一些全局变量（`window`,`document`,自定义全局变量等等），了解javascript作用域链的人都知道，在局部作用域中访问全局变量需要一层一层遍历整个作用域链直至顶级作用域，而局部变量的访问效率则会更快更高，因此在局部作用域中高频率使用一些全局对象时可以将其导入到局部作用域中，例如：

作为参数传入模块
{{{class="brush: javascript"
(function(window,$){
	var xxx = window.xxx;
	$("#xxx1").xxx();
	$("#xxx2").xxx();
})(window,jQuery);
}}}

暂存到局部变量
{{{class="brush: javascript"
function() {
	var doc = document;
	var global = window.global;
}
}}}

=== eval以及类eval问题 ===

我们都知道`eval`可以将一段字符串当做js代码来执行处理，据说使用eval执行的代码比不使用eval的代码慢100倍以上（具体效率我没有测试，有兴趣同学可以测试一下）

JavaScript 代码在执行前会进行类似“预编译”的操作：首先会创建一个当前执行环境下的活动对象，并将那些用`var`申明的变量设置为活动对象的属性，但是此时这些变量的赋值都是`undefined`，并将那些以`function`定义的函数也添加为活动对象的属性，而且它们的值正是函数的定义。但是，如果你使用了`eval`，则其中的代码（实际上为字符串）无法预先识别其上下文，无法被提前解析和优化，即无法进行预编译的操作。所以，其性能也会大幅度降低

其实现在大家一般都很少会用eval了，这里我想说的是几个类eval的场景(`new Function{}`,`setTimeout`,`setInterver`)
{{{class="brush: javascript"
setTimtout("alert(1)",1000);
setInterver("alert(1)",1000);
(new Function("alert(1)"))();
}}}

上述几种类型代码执行效率都会比较低，因此建议直接传入匿名方法、或者方法的引用给`setTimeout`方法。

=== 闭包结束后释放掉不再被引用的变量 ===
	
{{{class="brush: javascript"
var f = (function(){
	var a = {name:"var3"};
	var b = ["var1","var2"];
	var c = document.getElementByTagName("li");
	//****其它变量
	//***一些运算
	var res = function(){
		alert(a.name);
	}
	return res;
})()
}}}

上述代码中变量f的返回值是由一个立即执行函数构成的闭包中返回的方法`res`，该变量保留了对于这个闭包中所有变量（`a`,`b`,`c`等）的引用，因此这两个变量会一直驻留在内存空间中,尤其是对于dom元素的引用对内存的消耗会很大，而我们在`res`中只使用到了`a`变量的值，因此，在闭包返回前我们可以将其它变量释放
	
{{{class="brush: javascript"
var f = (function(){
	var a = {name:"var3"};
	var b = ["var1","var2"];
	var c = document.getElementByTagName("li");
	//****其它变量
	//***一些运算
	//闭包返回前释放掉不再使用的变量
	b = c = null;
	var res = function(){
		alert(a.name);
	}
	return res;
})()
}}}

== Js操作dom的效率 ==

=== 减少reflow ===

什么是reflow？

当 DOM 元素的属性发生变化 (如 color) 时, 浏览器会通知 render 重新描绘相应的元素, 此过程称为 repaint。

如果该次变化涉及元素布局 (如 width), 浏览器则抛弃原有属性, 重新计算并把结果传递给 render 以重新描绘页面元素, 此过程称为 reflow。

减少reflow的方法

# 先将元素从`document`中删除，完成修改后再把元素放回原来的位置（当对某元素及其子元素进行大量reflow操作时，1,2两种方法效果才会比较明显）
# 将元素的`display`设置为`none`，完成修改后再把`display`修改为原来的值
# 修改多个样式属性时定义`class`类代替多次修改`style`属性
# 大量添加元素到页面时使用`documentFragment`

例如：

{{{class="brush: javascript"	
for(var i=0;i<100:i++){
    var child = docuemnt.createElement("li");
    child.innerHtml = "child";
    document.getElementById("parent").appendChild(child);
}
}}}

上述代码会多次操作dom，效率比较低，可以改为下面的形式：

创建`documentFragment`，将所有元素加入到`docuemntFragment`不会改变dom结构，最后将其添加到页面，只进行了一次reflow。

{{{class="brush: javascript"
var frag = document.createDocumentFragment();
for(var i=0;i<100:i++){
        var child = docuemnt.createElement("li");
        child.innerHtml = "child";
    frag.appendChild(child);
}
document.getElementById("parent").appendChild(frag);
}}}

=== 暂存dom状态信息 ===

当代码中需要多次访问元素的状态信息，在状态不变的情况下我们可以将其暂存到变量中，这样可以避免多次访问dom带来内存的开销，典型的例子就是：

{{{class="brush: javascript"	
var lis = document.getElementByTagName("li");
for(var i=1; i<lis.length; i++){
    //***
}
}}}

上述方式会在每一次循环都去访问dom元素，我们可以简单将代码优化如下

{{{class="brush: javascript"
var lis = document.getElementByTagName("li");
for(var i=1,j=lis.length; i<j; i++) { // 把长度给j，只执行一次
    //***
}
}}}

=== 缩小选择器的查找范围 ===

查找dom元素时尽量避免大面积遍历页面元素，尽量使用精准选择器，或者指定上下文以缩小查找范围，以jquery为例：

# 少用模糊匹配的选择器：例如`"[name*='_fix']"`，多用诸如`id`以及逐步缩小范围的复合选择器`"li.active"`等。
# 指定上下文：例如`"#parent .class"`，`(".class",$el)`等。

=== 使用事件委托 ===

使用场景：一个有大量记录的列表，每条记录都需要绑定点击事件，在鼠标点击后实现某些功能，我们通常的做法是给每条记录都绑定监听事件，这种做法会导致页面会有大量的事件监听器，效率比较低下。

基本原理：我们都知道dom规范中事件是会冒泡的，也就是说在不主动阻止事件冒泡的情况下任何一个元素的事件都会按照`dom`树的结构逐级冒泡至顶端。而`event`对象中也提供了`event.target`（IE下是`srcElement`）指向事件源，因此我们即使在父级元素上监听该事件也可以找到触发该事件的最原始的元素，这就是委托的基本原理。

示例

{{{class="brush: javascript"
$("ul li").bind("click",function(){
    alert($(this).attr("data"));
})
}}}

上述写法其实是给所有的`li`元素都绑定了`click`事件来监听鼠标点击每一个元素的事件，这样页面上会有大量的事件监听器。

根据上面介绍的监听事件的原理我们来改写一下

{{{class="brush: javascript"	
$("ul").bind("click",function(e){
    if(e.target.nodeName.toLowerCase() ==="li"){
        alert($(e.target).attr("data"));
    }
})
}}}

这样一来，我们就可以只添加一个事件监听器去捕获所有`li`上触发的事件，并做出相应的操作。

当然，我们不必每次都做事件源的判断工作，可以将其抽象一下交给工具类来完成。jquery中的`delegate()`方法就实现了该功能。

语法是这样的`$(selector).delegate(childSelector,event,data,function)`，例如：

{{{class="brush: javascript"	
$("div").delegate("button","click",function(){
  $("p").slideToggle();
});
}}}
	
参数说明（引自w3school）

| 参数          | 描述                                                                           |
| childSelector | 必需。规定要附加事件处理程序的一个或多个子元素。                               |
| event         | 必需。规定附加到元素的一个或多个事件。由空格分隔多个事件值。必须是有效的事件。 |
| data          | 可选。规定传递到函数的额外数据。                                               |
| function      | 必需。规定当事件发生时运行的函数。                                             |

Tips:事件委托还有一个好处就是，即使在事件绑定之后动态添加的元素上触发的事件同样可以监听到哦，这样就不用在每次动态加入元素到页面后都为其绑定事件了。


= 类型 =

== instanceof运算符 ==

在 JavaScript 中，判断一个变量的类型尝尝会用`typeof`运算符，在使用`typeof`运算符时采用引用类型存储值会出现一个问题，无论引用的是什么类型的对象，它都返回`object`。ECMAScript 引入了另一个 Java 运算符 `instanceof `解决这个问题。`instanceof`运算符与`typeof`运算符相似，用于识别正在处理的对象的类型。与`typeof`方法不同的是，`instanceof`方法要求开发者明确地确认对象为某特定类型。例如：

{{{class="brush: javascript"
var oStringObject = new String("hello world");
console.log(oStringObject instanceof String);   // 输出 "true"
}}}


=== instanceof运算符的常规用法 ===

通常来讲，使用`instanceof`就是判断一个实例是否属于某种类型。例如：

{{{class="brush: javascript"
// 判断 foo 是否是 Foo 类的实例
function Foo(){}
var foo = new Foo();
console.log(foo instanceof Foo)//true
}}}

另外，更重的一点是 instanceof 可以在继承关系中用来判断一个实例是否属于它的父类型。例如：

		
{{{class="brush: javascript"
// 判断 foo 是否是 Foo 类的实例 , 并且是否是其父类型的实例
function Aoo(){}
function Foo(){}
Foo.prototype = new Aoo();//JavaScript 原型继承
 
var foo = new Foo();
console.log(foo instanceof Foo)//true
console.log(foo instanceof Aoo)//true
}}}

上面的代码中是判断了一层继承关系中的父类，在多层继承关系中，instanceof 运算符同样适用。

你真的了解 instanceof 操作符吗？

看了上面的代码示例，是不是觉得 instanceof 操作符很简单，下面来看点复杂的用法。

{{{class="brush: javascript"
	console.log(Object instanceof Object);//true
	console.log(Function instanceof Function);//true
	console.log(Number instanceof Number);//false
	console.log(String instanceof String);//false
	 
	console.log(Function instanceof Object);//true
	 
	console.log(Foo instanceof Function);//true
	console.log(Foo instanceof Foo);//false
}}}

看了上面的代码是不是又晕头转向了？为什么 Object 和 Function instanceof 自己等于 true，而其他类 instanceof 自己却又不等于 true 呢？如何解释？要想从根本上了解 instanceof 的奥秘，需要从两个方面着手：1，语言规范中是如何定义这个运算符的。2，JavaScript 原型继承机制。

=== 详细剖析 ===

详细剖析 ECMAScript-262 edition 3 中 instanceof 运算符的定义

语言规范对中 instanceof 运算符的定义如下：

{{{class="brush: javascript"
RelationalExpression instanceof ShiftExpression is evaluated as follows:
				  
1. Evaluate RelationalExpression.
2. Call GetValue(Result(1)).// 调用 GetValue 方法得到 Result(1) 的值，设为 Result(2)
3. Evaluate ShiftExpression.
4. Call GetValue(Result(3)).// 同理，这里设为 Result(4)
5. If Result(4) is not an object, throw a TypeError exception.
		// 如果 Result(4) 不是 object，抛出异常
		/* 如果 Result(4) 没有 [[HasInstance]] 方法，抛出异常。
			 规范中的所有 [[...]] 方法或者属性都是内部的，
			 在 JavaScript 中不能直接使用。并且规范中说明，只有 Function 对象实现了
			 [[HasInstance]] 方法。所以这里可以简单的理解为：
			 如果 Result(4) 不是 Function 对象，抛出异常 
		*/
6. If Result(4) does not have a [[HasInstance]] method, throw a TypeError exception.
		// 相当于这样调用：Result(4).[[HasInstance]](Result(2))
7. Call the [[HasInstance]] method of Result(4) with parameter Result(2).
8. Return Result(7).
}}}

相关的 HasInstance 方法定义

{{{class="brush: javascript"
15.3.5.3 [[HasInstance]] (V)

	Assume F is a Function object.// 这里 F 就是上面的 Result(4)，V 是 Result(2)
	When the [[HasInstance]] method of F is called with value V, the following steps are taken:

1. If V is not an object, return false.// 如果 V 不是 object，直接返回 false
2. Call the [[Get]] method of F with property name "prototype".
		// 用 [[Get]] 方法取F 的 prototype 属性
3. Let O be Result(2).//O = F.[[Get]]("prototype")
4. If O is not an object, throw a TypeError exception.
5. Let V be the value of the [[Prototype]] property of V.//V = V.[[Prototype]]
6. If V is null, return false.
		// 这里是关键，如果 O 和 V 引用的是同一个对象，则返回 true；
		// 否则，到 Step 8 返回 Step 5 继续循环
7. If O and V refer to the same object or if they refer to objects joined to 
		each other (section 13.1.2), return true.
8. Go to step 5.
}}}

上面的规范定义很晦涩，而且看起来比较复杂，涉及到很多概念，但把这段规范翻译成 JavaScript 代码却很简单，如下：

{{{class="brush: javascript"
function instance_of(L, R) {//L 表示左表达式，R 表示右表达式
	var O = R.prototype;// 取 R 的显示原型
	L = L.__proto__;// 取 L 的隐式原型
	while (true) {
		if (L === null) {return false;}
		// 这里重点：当 O 严格等于 L 时，返回 true
		if (O === L) {return true;}
		L = L.__proto__;
	}
}
}}}

=== JavaScript 原型继承机制 ===

由于本文主要集中在剖析 JavaScript instanceof 运算符，所以对于 JavaScript 的原型继承机制不再做详细的讲解，下面参考来自 http://www.mollypages.org/misc/js.mp 的一张图片，此图片详细的描述了 JavaScript 各种对象的显示和隐式原型链结构。

由其本文涉及显示原型和隐式原型，所以下面对这两个概念作一下简单说明。在 JavaScript 原型继承结构里面，规范中用`[[Prototype]]`表示对象隐式的原型，在 JavaScript 中用`__proto__`表示，并且在 Firefox 和 Chrome 浏览器中是可以访问得到这个属性的，但是 IE 下不行。所有 JavaScript 对象都有`__proto__`属性，但只有`Object.prototype.__proto__`为 null，前提是没有在 Firefox 或者 Chrome 下修改过这个属性。这个属性指向它的原型对象。 至于显示的原型，在 JavaScript 里用`prototype`属性表示，这个是 JavaScript 原型继承的基础知识，在这里就不在叙述了。

JavaScript 原型链

<img src="images/javascript/js.figure1.jpg" />

=== instanceof运算符深入剖析 ===

讲解 instanceof 复杂用法

有了上面 instanceof 运算符的 JavaScript 代码和原型继承图，再来理解 instanceof 运算符将易如反掌。下面将详细讲解`Object instanceof Object`，`Function instanceof Function`和`Foo instanceof Foo`三个示例，其它示例读者可自行推演。

分析``Object instanceof Object`：

{{{class="brush: javascript"
// 为了方便表述，首先区分左侧表达式和右侧表达式
ObjectL = Object, ObjectR = Object;
// 下面根据规范逐步推演
O = ObjectR.prototype = Object.prototype
L = ObjectL.__proto__ = Function.prototype
// 第一次判断
O != L
// 循环查找 L 是否还有 __proto__
L = Function.prototype.__proto__ = Object.prototype
// 第二次判断
O == L
// 返回 true
}}}

分析``Function instanceof Function`：
                
{{{class="brush: javascript"
// 为了方便表述，首先区分左侧表达式和右侧表达式
FunctionL = Function, FunctionR = Function;
// 下面根据规范逐步推演
O = FunctionR.prototype = Function.prototype
L = FunctionL.__proto__ = Function.prototype
// 第一次判断
O == L
// 返回 true
}}}

分析`Foo instanceof Foo`：
 
{{{class="brush: javascript"
// 为了方便表述，首先区分左侧表达式和右侧表达式
FooL = Foo, FooR = Foo;
// 下面根据规范逐步推演
O = FooR.prototype = Foo.prototype
L = FooL.__proto__ = Function.prototype
// 第一次判断
O != L
// 循环再次查找 L 是否还有 __proto__
L = Function.prototype.__proto__ = Object.prototype
// 第二次判断
O != L
// 再次循环查找 L 是否还有 __proto__
L = Object.prototype.__proto__ = null
// 第三次判断
L == null
// 返回 false
}}}

=== instanceofDojo继承机制 ===

在 JavaScript 中，是没有多重继承这个概念的，就像 Java 一样。但在 Dojo 中使用`declare`声明类时，是允许继承自多个类的。下面以 Dojo 1.6.1 为例。

Dojo 中多重继承
        
{{{class="brush: javascript"
dojo.declare("Aoo",null,{});
dojo.declare("Boo",null,{});
dojo.declare("Foo",[Aoo,Boo],{});
 
var foo = new Foo();
console.log(foo instanceof Aoo);//true
console.log(foo instanceof Boo);//false
 
console.log(foo.isInstanceOf(Aoo));//true
console.log(foo.isInstanceOf(Boo));//true
}}}

上面的示例中，`Foo`同时继承自`Aoo`和`Boo`，但当使用`instanceof`运算符来检查`foo`是否是`Boo`的实例时，返回的是`false`。实际上，在 Dojo 的内部，`Foo`仍然只继承自`Aoo`，而通过mixin机制把`Boo`类中的方法和属性拷贝到`Foo`中，所以当用`instanceof`运算符来检查是否是`Boo`的实例时，会返回`false`。所以 Dojo 为每个类的实例添加了一个新的方法叫`isInstanceOf`，用这个方法来检查多重继承。

