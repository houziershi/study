

%title Linux基本操作

%toc Linux基本操作


= 软件安装 =

== apt ==

=== 查看已经安装的包 ===

{{{class="brush: bash"
dpkg -l |grep openssh-server
}}}

=== 安装 ===

安装firefox

源地址：

{{{class="brush: bash"
deb http://downloads.sourceforge.net/project/ubuntuzilla/mozilla/apt/ all main
}}}

加密钥并安装：

{{{class="brush: bash"
gpg --keyserver keyserver.ubuntu7.com --recv C1289A29
gpg --export --armor C1289A29 | sudo apt-key add -
}}}

可以简写：

{{{class="brush: bash"
sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com C1289A29
}}}

安装：

{{{class="brush: bash"
sudo apt-get install firefox-mozilla-build
}}}

安装前记住一定要把iceweasel完全删除掉：

{{{class="brush: bash"
sudo apt-get purge iceweasel
sudo apt-get install firefox-mozilla-build
}}}

=== 安装不完全与安装损坏 ===

备份配置文件并删除相关的package记录：

{{{class="brush: bash"
sudo cp /var/lib/dpkg/status ~/backup/dpkg/
sudo vim /var/lib/dpkg/status
}}}

查找你出问题的软件包，全删除整个关于这个包的package（保证下一个package和
上一个package中间有一行空行），保存退出。

然后重新安装。 

=== 删除 ===

包括配置文件完全删除：

{{{class="brush: bash"
apt-get purge xxx
}}}

相当于：

{{{class="brush: bash"
apt-get remove --purge xxx
}}}

=== 安装Oracle JDK ===

使用PPA源：

{{{class="brush: bash"
sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
sudo apt-get install oracle-java7-installer
}}}

安装完成后检查当前的版本：

{{{class="brush: bash"
java -version
}}}

应该已经是Oracle官方的版本了：

{{{class="brush: bash"
java version "1.7.0_04"
Java(TM) SE Runtime Environment (build 1.7.0_04-b20)
Java HotSpot(TM) Server VM (build 23.0-b21, mixed mode)
}}}

以后可以手动选择java运行环境：

{{{class="brush: bash"
sudo update-alternatives --config java
}}}

在安装过程中，会要求用户同意Oracle的协议。虽然只要动一下手就可以了，但是在有些
情况下我们希望能全自动安装，以下的命令可以自动同意协议：

{{{class="brush: bash"
sudo echo oracle-java7-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections
}}}

要删除也很简单：

{{{class="brush: bash"
sudo apt-get remove oracle-java7-installer
}}}

=== 配置默认程序优先级 ===

`update-alternatives`管理程序的优先级。如`x-www-browser`对应了多个在图形界面下
的web浏览器，默认会使用这些程序中优先级最高的：

以web浏览器的组`x-www-browser`为例。查看现在有哪些程序被定义为web浏览器，以及
它们被调用的优先级：

{{{class="brush: bash"
update-alternatives --display x-www-browser 
}}}

以web浏览器的组`x-www-browser`为例。我们新安装了firefox浏览器，
现在把它也加到这一组里：

{{{class="brush: bash"
// 格式: update-alternatives --install <配置的链接> <配置的名字> <程序路径> <整数优先级>
update-alternatives --install /usr/bin/x-www-browser x-www-browser /usr/bin/firefox 90 
}}}

以web浏览器的组`x-www-browser`为例。我们现在设置firefox为默认浏览器：

{{{class="brush: bash"
update-alternatives --config x-www-browser
}}}

上面的命令会列出所有相关的程序，输入序号选择一个默认的。


= 任务管理 = 

中断任务：`Control + C`

挂起任务：`Control + Z`

显示当前任务的作业号`q：jobs`

指定任务８在后台执行
{{{class="brush: bash"
bg %8
}}}

指定任务８在前台执行
{{{class="brush: bash"
fg %8
}}}

= 文件操作 =

== 散列 ==

{{{class="brush: bash"
echo "yangpan220" | md5sum
}}}

注意上面的echo会自动加上一个回车。可以用-n去掉：

{{{class="brush: bash"
echo -n 'yangpan220' | md5sum
}}}


== 压缩 ==

=== bzip2 ===

{{{class="brush: bash"
$ bzip2 -v log.txt 
  log.txt:  3.953:1,  2.024 bits/byte, 74.70% saved, 336 in, 85 out.
$ bunzip2 -v log.txt.bz2 
  log.txt.bz2: done
$ ls
log.txt
$ 
}}}

=== zip ===

zip命令可以用来将文件压缩成为常用的zip格式。unzip命令则用来解压缩zip文件。

1. 我想把一个文件abc.txt和一个目录dir1压缩成为yasuo.zip：
{{{class="brush: bash"
zip -r yasuo.zip abc.txt dir1
}}}

2.我下载了一个yasuo.zip文件，想解压缩：
{{{class="brush: bash"
unzip yasuo.zip
}}}

3.我当前目录下有abc1.zip，abc2.zip和abc3.zip，我想一起解压缩它们：
{{{class="brush: bash"
unzip abc\?.zip
// ?表示一个字符，如果用*表示任意多个字符。
}}}


4.我有一个很大的压缩文件large.zip，我不想解压缩，只想看看它里面有什么：
{{{class="brush: bash"
unzip -v large.zip
}}}

5.我下载了一个压缩文件large.zip，想验证一下这个压缩文件是否下载完全了：
{{{class="brush: bash"
unzip -t large.zip
}}}

6.我用-v选项发现music.zip压缩文件里面有很多目录和子目录，并且子目录中其实都是
歌曲mp3文件，我想把这些文件都下载到第一级目录，而不是一层一层建目录：
{{{class="brush: bash"
unzip -j music.zip
}}}

= 文本文件 =

== 查找 ==

{{{class="brush: bash"
find / -name "*.conf" | xargs grep "alias" 
}}}

== 编码与格式 ==

=== 字符编码 ===

转换单个文件：

{{{class="brush: bash"
iconv -f GBK -t UTF-8 tt.json > tt.json
}}}

把当前目录下的文件转换编码：

{{{class="brush: bash"
sed -i "s/old/new/g" `grep old -rl ./`
}}}

或是：

{{{class="brush: bash"
`enca -L zh_CN -x utf-8 *`
}}}

=== 换行 ===

Windows文本文件的`^M`，注意这个`^M`的输入方式为`CTRL v CTRL m`。

使用`dos2unix`命令:

{{{class="brush: bash"
$ dos2unix myfile.txt
}}}

使用sed命令：

{{{class="brush: bash"
$ sed -e ‘s/^M/\n/g’ myfile.txt
}}}
