

%title Linux基本操作

%toc Linux基本操作

= 简单工具 =

== 日期时间 ==

=== cal ===

{{{class="brush: bash"
cal
cal 02 1995
}}}

=== date ===

取得时间：

{{{class="brush: bash"
root@tecmint:~# date
 
Fri May 17 14:13:29 IST 2013
}}}
	
设置时间：

{{{class="brush: bash"
root@tecmint:~# date --set='14 may 2013 13:57'
 
Mon May 13 13:57:00 IST 2013
}}}


=== alias ===

`alias`是一个系统自建的shell命令，允许你为名字比较长的或者经常使用的命令指定别名
。

我经常用`ls -l`命令，它有五个字符（包括空格）。于是我为它创建了一个别名`l`。

{{{class="brush: bash"
root@tecmint:~# alias l='ls -l'
}}}

试试它是否能用：

{{{class="brush: bash"
root@tecmint:~# l
 
total 36
drwxr-xr-x 3 tecmint tecmint 4096 May 10 11:14 Binary
drwxr-xr-x 3 tecmint tecmint 4096 May 21 11:21 Desktop
drwxr-xr-x 2 tecmint tecmint 4096 May 21 15:23 Documents
drwxr-xr-x 8 tecmint tecmint 4096 May 20 14:56 Downloads
drwxr-xr-x 2 tecmint tecmint 4096 May  7 16:58 Music
drwxr-xr-x 2 tecmint tecmint 4096 May 20 16:17 Pictures
drwxr-xr-x 2 tecmint tecmint 4096 May  7 16:58 Public
drwxr-xr-x 2 tecmint tecmint 4096 May  7 16:58 Templates
drwxr-xr-x 2 tecmint tecmint 4096 May  7 16:58 Videos
}}}

去掉`l`别名，要使用`unalias`命令：

{{{class="brush: bash"
root@tecmint:~# unalias l
}}}

再试试：

{{{class="brush: bash"
root@tecmint:~# l
 
bash: l: command not found
}}}



= 系统信息 =

== uname ==

`uname`命令就是Unix Name的简写。显示机器名，操作系统和内核的详细信息。

{{{class="brush: bash"
root@tecmint:~# uname -a
 
Linux tecmint 3.8.0-19-generic #30-Ubuntu SMP Wed May 1 16:36:13 UTC 2013 i686 i686 i686 GNU/Linux
}}}

`uname`显示内核类别， `uname -a`显示详细信息：

# `Linux`: 机器的内核名
# `tecmint`: 机器的分支名
# `3.8.0-19-generic`: 内核发布版本
# `#30-Ubuntu SMP`: 内核版本
# `i686`: 处理器架构
# `GNU/Linux`: 操作系统名

== issue ==

`cat /etc/issue`

== whereis ==

`whereis`的作用是用来定位命令的二进制文件\资源\或者帮助页，举例来说，获得`ls`和
`kill`命令的二进制文件/资源以及帮助页：

{{{class="brush: bash"
root@tecmint:~# whereis ls
 
ls: /bin/ls /usr/share/man/man1/ls.1.gz

root@tecmint:~# whereis kill
 
kill: /bin/kill /usr/share/man/man2/kill.2.gz /usr/share/man/man1/kill.1.gz
}}}

注意:当需要知道二进制文件保存位置时有用.

= 用户管理 =

修改用户配置：

{{{class="brush: bash"
usermod  [-u uid [-o]] [-g group] [-G group,...]
	[-d 主目录 [-m]] [-s shell] [-c 注释] [-l 新名称]
	[-f 失效日] [-e 过期日] [-p 密码] [-L|-U] 用户名
}}}



= 软件安装 =

[[linux.base.dpkg]]

= 文件系统 =

[[linux.base.filesystem]]

= 任务管理 = 

== jobs ==

中断任务：`Control + C`

挂起任务：`Control + Z`

显示当前任务的作业号`q：jobs`

指定任务８在后台执行
{{{class="brush: bash"
bg %8
}}}

指定任务８在前台执行
{{{class="brush: bash"
fg %8
}}}


= 进程管理 = 

== kill ==

假设你想杀死已经没有响应的`apache2`进程,运行如下命令:

{{{class="brush: bash"
root@tecmint:~# ps -A | grep -i apache2
 
1285 ?        00:00:00 apache2
}}}

搜索`apache2`进程,找到PID并杀掉它.例如:在本例中`apache2`进程的PID是1285..

{{{class="brush: bash"
root@tecmint:~# kill 1285
}}}

注意:每次你重新运行一个进程或者启动系统,每个进程都会生成一个新的PID.你可以使用
`ps`命令获得当前运行进程的PID.

== pkill ==

另一个杀死进程的方法是:
	
{{{class="brush: bash"
root@tecmint:~# pkill apache2
}}}

注意:kill需要PID作为参数,pkill可以选择应用的方式,比如指定进程的所有者等.

= 服务 =

== service ==

`service`命令控制服务的启动、停止和重启，它让你能够不重启整个系统就可以让配置
生效以开启、停止或者重启某个服务。

在Ubuntu上启动apache2 server：

{{{class="brush: bash"
root@tecmint:~# service apache2 start
 
 * Starting web server apache2                                                                                                                                 apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1 for ServerName
httpd (pid 1285) already running                        [ OK ]
}}}

重启apache2 server：

{{{class="brush: bash"
root@tecmint:~# service apache2 restart
 
* Restarting web server apache2                                                                                                                               apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1 for ServerName
 ... waiting .apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1 for ServerName  [ OK ]
}}}

停止apache2 server：

{{{class="brush: bash"
root@tecmint:~# service apache2 stop
 
 * Stopping web server apache2                                                                                                                                 apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1 for ServerName
 ... waiting                                                                [ OK ]
}}}

注意：要想使用`service`命令，进程的脚本必须放在`/etc/init.d`，并且路径必须在指定
的位置。

如果要运行`service apache2 start`实际上实在执行

{{{class="brush: bash"
service /etc/init.d/apache2 start
}}}



= 文件操作 =

== 散列 ==

{{{class="brush: bash"
echo "yangpan220" | md5sum
}}}

注意上面的echo会自动加上一个回车。可以用-n去掉：

{{{class="brush: bash"
echo -n 'yangpan220' | md5sum
}}}


== 压缩 ==

[[linux.base.compress]]


== 查找 ==

[[linux.base.search]]

= 文本文件 =

== 查找 ==

{{{class="brush: bash"
find / -name "*.conf" | xargs grep "alias" 
}}}

== 编码与格式 ==

=== ASCII ===

`main ascii`可以直接查看OCT或HEX的ascii表。

=== 生成16f进制 ===

`xxd`可以生成16进制：

{{{class="brush: bash"
$ xxd vab.txt 
0000000: 4e61 6d69 6e67 2043 6f6e 7665 6e74 696f  Naming Conventio
0000010: 6e73 efbc 88e8 a784 e88c 83ef bc8c e58d  ns..............
0000020: 8fe8 aeae efbc 890d 0a0d 0a64 6973 636f  ...........disco
0000030: 7572 6167 6564 20e6 b094 e9a6 81ef bc8c  uraged .........
0000040: e4bd bfe5 8a9d e998 bb0d 0a0d 0a70 656e  .............pen
0000050: 6461 6e74 20e8 8bb1 205b cb88 7065 6e64  dant ... [..pend
0000060: c999 6e74 5d20 e7be 8e20 5bcb 8870 c99b  ..nt] ... [..p..
0000070: 6e64 c999 6e74 5d20 6e2e efbc 88e8 a385  nd..nt] n.......
0000080: e59c a8e9 a1b9 e993 bee7 ad89 e4b8 8ae7  ................
0000090: 9a84 efbc 89e5 9e82 e9a5 b0ef bc8c e59d  ................
00000a0: a0e5 84bf 0d0a                           ......
}}}

还可以把二六进制还原为二进制。甚至把十六进制拷贝输出成C数组：

{{{class="brush: bash"
$ xxd -i vab.txt  
unsigned char vab_txt[] = {
  0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x43, 0x6f, 0x6e, 0x76, 0x65,
  0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xef, 0xbc, 0x88, 0xe8, 0xa7, 0x84,
  0xe8, 0x8c, 0x83, 0xef, 0xbc, 0x8c, 0xe5, 0x8d, 0x8f, 0xe8, 0xae, 0xae,
  0xef, 0xbc, 0x89, 0x0d, 0x0a, 0x0d, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f,
  0x75, 0x72, 0x61, 0x67, 0x65, 0x64, 0x20, 0xe6, 0xb0, 0x94, 0xe9, 0xa6,
  0x81, 0xef, 0xbc, 0x8c, 0xe4, 0xbd, 0xbf, 0xe5, 0x8a, 0x9d, 0xe9, 0x98,
  0xbb, 0x0d, 0x0a, 0x0d, 0x0a, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74,
  0x20, 0xe8, 0x8b, 0xb1, 0x20, 0x5b, 0xcb, 0x88, 0x70, 0x65, 0x6e, 0x64,
  0xc9, 0x99, 0x6e, 0x74, 0x5d, 0x20, 0xe7, 0xbe, 0x8e, 0x20, 0x5b, 0xcb,
  0x88, 0x70, 0xc9, 0x9b, 0x6e, 0x64, 0xc9, 0x99, 0x6e, 0x74, 0x5d, 0x20,
  0x6e, 0x2e, 0xef, 0xbc, 0x88, 0xe8, 0xa3, 0x85, 0xe5, 0x9c, 0xa8, 0xe9,
  0xa1, 0xb9, 0xe9, 0x93, 0xbe, 0xe7, 0xad, 0x89, 0xe4, 0xb8, 0x8a, 0xe7,
  0x9a, 0x84, 0xef, 0xbc, 0x89, 0xe5, 0x9e, 0x82, 0xe9, 0xa5, 0xb0, 0xef,
  0xbc, 0x8c, 0xe5, 0x9d, 0xa0, 0xe5, 0x84, 0xbf, 0x0d, 0x0a
};
unsigned int vab_txt_len = 166;
}}}

=== 字符编码 ===

转换单个文件：

{{{class="brush: bash"
iconv -f GBK -t UTF-8 tt.json > tt.json
}}}

把当前目录下的文件转换编码：

{{{class="brush: bash"
sed -i "s/old/new/g" `grep old -rl ./`
}}}

或是：

{{{class="brush: bash"
`enca -L zh_CN -x utf-8 *`
}}}

=== 换行 ===

Windows文本文件的`^M`，注意这个`^M`的输入方式为`CTRL v CTRL m`。

使用`dos2unix`命令:

{{{class="brush: bash"
$ dos2unix myfile.txt
}}}

使用sed命令：

{{{class="brush: bash"
$ sed -e ‘s/^M/\n/g’ myfile.txt
}}}
