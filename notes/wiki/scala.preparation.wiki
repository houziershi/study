
%title 准备工作

%toc 准备工作

= 配置 =

== 字符编码问题 ==

在默认字符编码为UTF-8的Linux下没问题。

Mac OS X系统的默认字符编码早就改成了UTF-8但它bundle的Java默认字符编码却一直是
MacRoman。在启动REPL时传入参数`-Dfile.encoding=UTF-8`。

用vim、emacs或者你习惯的文本编辑器打开scala命令，比如：

{{{class="brush: bash"
$ vim `which scala`
}}}

找到如下行：
{{{class="brush: bash"
[ -n "$JAVA_OPTS" ] || JAVA_OPTS="-Xmx256M -Xms32M"
}}}

把`-D`参数加到`JAVA_OPTS`里即可。

== Vim插件 ==

到[[https://github.com/scala/scala-dist]]上下载，
复制`tool-support/src/vim`到`.vim`目录下。


= 使用 =
 
== Scala Shell ==

使用进入REPL环境的方式：

{{{class="brush: bash"
--(morgan-laptop:pts/8)-(13-03-15 9:04:57)-(~/workspace/study/scala)
\-(morgan:%) >>> scala
Welcome to Scala version 2.9.2 (OpenJDK 64-Bit Server VM, Java 1.7.0_15).
Type in expressions to have them evaluated.
Type :help for more information.

scala> 
}}}

输入回车自动换行。

发现输错了，再按几个回车就退出了。

退出`Scala Shell`：`:quit`或`:q`

在REPL环境中只能一行一行读取，所以如果要换行的话，不能让一行在语法上看起来已经
结束：

{{{class="brush: scala"
scala> if(x > 0) { 1
     | } else if(x == 0) 0 else -1
res1: Int = 1
}}}

另一个方法是在REPL中输入`:paste`粘贴代码，按下`Control + D`。

== 脚本 ==

脚本文件，可以接收一个参数并输出欢迎信息：

{{{class="brush: scala" title="helloarg.scala"
/* 可以接收一个参数 */
println("Hello, " + args(0) + "!")
}}}

调用脚本：scala命令、文件名、参数

{{{class="brush: bash"
--(morgan-laptop:pts/8)-(13-03-14 23:28:27)-(~/workspace/study/scala/tmp)
\-(morgan:%) >>> scala helloarg.scala Jade
Hello, Jade!
}}}

可以通过循环处理多个参数的：

{{{class="brush: scala" title="pa.scala"
args.foreach( arg => println(arg) )
}}}

调用：

{{{class="brush: bash"
--(morgan-laptop:pts/8)-(13-03-14 23:49:39)-(~/workspace/study/scala/tmp)
\-(morgan:%) >>> scala pa.scala Scala is even more fun      
Scala
is
even
more
fun
}}}

=== OS可执行脚本 ===

Unix下可执行脚本：

{{{class="brush: scala" title="helloarg"
#!/bin/sh
	exec scala "$0" "$@"
!#

println("hello," + arg(0) + "!")
}}}

执行：

{{{class="brush: bash"
$ chmod +x helloarg

$ ./helloarg globe
}}}

Windows下可执行脚本：

{{{class="brush: scala" title="helloarg.bat"
::#!
@echo off
call scala %0 %*
goto :eof
::!#

println("hello," + arg(0) + "!")
}}}

执行：

{{{class="brush: bash"
> helloarg.bat globe
}}}


== Scala程序 ==

先看一个工具类，它根据字符串来计算出检验和：

{{{class="brush: scala" title="ChecksumAccumulator.scala"
import scala.collection.mutable.Map

class ChecksumAccumulator {
	private var sum = 0
	def add(b: Byte) { sum += b }
	def checksum(): Int =  ~(sum &0xFF) + 1
}

object ChecksumAccumulator {
	private val cache = Map[String, Int]()

	def calculate(s: String): Int =
		if( cache.contains(s) ) {
			cache(s)
		} else {
			val acc = new ChecksumAccumulator
			for (c <- s)
				acc.add(c.toByte)
			val cs = acc.checksum()
			cache += (s -> cs)
			cs
		}
}
}}}

然后是主程序。独立运行的程序一定要有`main`方法（仅有一个参数`Array[String]`而且
结果类型为`Unit`）的单例对象。

{{{class="brush: scala" title="Summer.scala"
import ChecksumAccumulator.calculate

object Summer {

	def main(args: Array[String]) {
		for (arg <- args)
			println(arg + " -> " + calculate(arg))
	}

}
}}}

编译Scala程序：

{{{class="brush: bash"
--(morgan-laptop:pts/8)-(13-03-15 0:28:39)-(~/workspace/study/scala/tmp)
\-(morgan:%) >>> scalac ChecksumAccumulator.scala Summer.scala
}}}

有一个`fast Scala compiler`的后台进程可以在第一次被调用后一直跑在后台，
节省一下每次编译的速度：

{{{class="brush: bash"
--(morgan-laptop:pts/8)-(13-03-15 0:29:11)-(~/workspace/study/scala/tmp)
\-(morgan:%) >>> fsc ChecksumAccumulator.scala Summer.scala   
}}}

可以关掉这个后台进程：

{{{class="brush: bash"
--(morgan-laptop:pts/8)-(13-03-15 0:29:11)-(~/workspace/study/scala/tmp)
\-(morgan:%) >>> fsc -shutdown
}}}

编译完后可以看到生成的`.class`文件：

{{{class="brush: bash"
--(morgan-laptop:pts/8)-(13-03-15 0:44:31)-(~/workspace/study/scala/tmp)
\-(morgan:%) >>> ls *.class
ChecksumAccumulator$$anonfun$calculate$1.class  ChecksumAccumulator$.class    Summer.class
ChecksumAccumulator.class                       Summer$$anonfun$main$1.class  Summer$.class
}}}

运行编译出来的类文件：

{{{class="brush: bash"
--(morgan-laptop:pts/8)-(13-03-15 0:30:58)-(~/workspace/study/scala/tmp)
\-(morgan:%) >>> scala Summer of love
of -> -213
love -> -182
}}}

还有一个加入的`Application`特质的方式实现应用程序，但是有局限：
不能访问命令行参数、只能在单线程下用。所以不推荐用它。

形式类似于：
{{{class="brush: scala" title="myApp.scala"
object MyApp extends Application {
	println("Hello")
}	
}}}

== Ant任务 ==

相关的Ant任务有`scalac`、`fsc`和`scaladoc`，这里只介绍`scalac`。

{{{class="brush: bash" title="build.properties"
scala.home=/opt/morganstudio/language/scala
compile.version=1.7
deploy.name=scala-example
}}}

{{{class="brush: xml" title="build.xml"
<?xml version="1.0" encoding="UTF-8"?>
<project name="scala-example" default="init" basedir=".">
	<description>scala example</description>
	<property file="build.properties" />

	<property name="sources.dir" value="sources" />
	<property name="build.dir" value="build" />

	<target name="init">
		<property name="scala-library.jar" 
			value="${scala.home}/lib/scala-library.jar" />
		<path id="build.classpath">
			<pathelement location="${scala-library.jar}"   />
			<pathelement location="${build.dir}"   />
		</path>
		<taskdef resource="scala/tools/ant/antlib.xml">
			<classpath>
				<pathelement location="${scala.home}/lib/scala-compiler.jar"   />
				<pathelement location="${scala-library.jar}"   />
			</classpath>
		</taskdef>
	</target>

	<target name="build" depends="init">
		<mkdir dir="${build.dir}"   />
		<scalac srcdir="${sources.dir}"
			destdir="${build.dir}"
			classpathref="build.classpath">
			<include name="**/*.scala"   />
		</scalac>
	</target>

	<target name="run" depends="build">
		<java classname="Summer"
			classpathref="build.classpath">
		</java>
	</target>
</project>
}}}

以后可能会用到的jar包还有`scala-actors.jar`和`scala-dbc.jar`.


== 脚本与程序的区别 ==

脚本必须以表达式结束，而程序以定义结尾。尝试以`scala`解释器运行程序会报错。



