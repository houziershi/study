
%title 字符串

%toc 字符串


= replace()方法 =

replace方法是属于String对象的，可用于替换字符串。

{{{class="brush: javascript"
StringObject.replace(searchValue,replaceValue)
}}}

* `StringObject`：字符串
* `searchValue`：字符串或正则表达式
* `replaceValue`：字符串或者函数

字符串替换字符串：

{{{class="brush: javascript"
'I am loser!'.replace('loser','hero')//I am hero!
}}}

直接使用字符串能让自己从loser变成hero，但是如果有2个loser就不能一起变成hero了。

{{{class="brush: javascript"
'I am loser,You are loser'.replace('loser','hero');//I am hero,You are loser
}}}

正则表达式替换为字符串：

{{{class="brush: javascript"
'I am loser,You are loser'.replace(/loser/g,'hero')//I am hero,You are hero
}}}

使用正则表达式，并将正则的global属性改为true则可以让所有loser都变为hero

== 捕获匹配结果 ==

`replaceValue`可以是字符串。如果字符串中有几个特定字符的话，会被转换为特定字符串。

=== 匹配字符串 ===

{{{class="brush: javascript"
  $&            
}}}

使用`$&`字符给匹配字符加大括号

{{{class="brush: javascript"
var sStr='讨论一下正则表达式中的replace的用法';
sStr.replace(/正则表达式/,'{$&}');

//讨论一下{正则表达式}中的replace的用法
}}}

=== 匹配字符串左右 ===

{{{class="brush: javascript"
  $`   // 左边 
  $'   // 右边
}}}

使用替换内容：

{{{class="brush: javascript"
'abc'.replace(/b/,"$`");//aac
'abc'.replace(/b/,"$'");//acc
}}}

=== 分组匹配结果 ===

{{{class="brush: javascript"
  $1,$2,$,3,…,$n 
}}}

使用分组匹配组合新的字符串

{{{class="brush: javascript"
'nimojs@126.com'.replace(/(.+)(@)(.*)/,"$2$1")//@nimojs
}}}

== 以函数作为`replaceValue` ==

`replaceValue`参数可以是一个函数

如果`replaceValue`是一个函数的话那么，这个函数的`arguments`会有`n+3`个参数（
`n`为正则匹配到的次数）：

先看例子帮助理解：

{{{class="brush: javascript"
function logArguments(){   
    console.log(arguments);//["nimojs@126.com", "nimojs", "@", "126.com", 0, "nimojs@126.com"]
    return '返回值会替换掉匹配到的目标'
}
console.log(
    'nimojs@126.com'.replace(/(.+)(@)(.*)/,logArguments)
)
//JaVaScRIPT
}}}

参数分别为：

* 匹配到的字符串（此例为`nimojs@126.com`，推荐修改上面代码的正则来查看匹配到的
  字符帮助理解）
* 如果正则使用了分组匹配就为多个否则无此参数。（此例的参数就分别为`nimojs`, `@`
  , `126.com`。推荐修改正则为`/nimo/`查看控制台中返回的arguments值）
* 匹配字符串的对应索引位置（此例为0）
* 原始字符串(此例为nimojs@126.com)

使用自定义函数将A-G字符串改为小写：

{{{class="brush: javascript"
'JAVASCRIPT'.replace(/[A-G]/g,function(){
    return arguments[0].toLowerCase();
})

//JaVaScRIPT
}}}

使用自定义函数做回调式替换将行内样式中的单引号删除：

{{{class="brush: javascript"
var myStr = '<span style="font-family:\'微软雅黑\';">demo</span>';

myStr.replace(/\'[^']+\'/g,function(){
	var sResult=arguments[0];
	console.log(sResult);//'微软雅黑'
	sResult=sResult.replace(/\'/g,'');
	console.log(sResult);//微软雅黑
	return sResult;
})

// 结果：<span style="font-family:微软雅黑;">demo</span>
}}}




{{{class="brush: javascript"
}}}


{{{class="brush: javascript"
}}}


{{{class="brush: javascript"
}}}

