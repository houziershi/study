
%title Java

%toc Java

= 多线程 =

== 线程基础 ==

线程控制： [[java.thread]]

== 并发 ==

线程安全问题：[[java.concurrency.unsafty]]

并发工具类：[[java.concurrency.class]]

显式锁：[[java.concurrency.Lock]]

条件队列：[[java.concurrency.Condition]]

Fork-Join模式：[[java.concurrency.fork-join]]


== JDK5的锁与条件 ==

某个线程调用`Lock`对象的`lock`方法来锁住，它用`unlock`放开其他线程就都不能用。
注意这两个方法的调用一定要用`try-finally`包起来。

通过`Lock`对象的`newCondition`方法来取得`Condition`对象。它的`await`方法会释放锁
并挂起当前线程，等待其他线程调用这个对象的`signal`或`signalAll`访求表示条件已经
满足。这些方法的调用推荐用`try-finally`包起来。


时间监听器接口在时间增长时执行操作：

{{{class="brush: java"
package thread;

import java.util.Date;

public interface ClockListener {

	public void update(Date date);

}
}}}

时钟类记录时间增长：

{{{class="brush: java"
package thread;

import java.util.Date;

public class Clock implements Runnable {
	private ClockListener listener;
	private boolean run = true;

	public Clock(ClockListener listener) {
		this.listener = listener;
		new Thread(this).start();
	}

	@Override
	public void run() {
		long lastTime = System.currentTimeMillis();
		while (this.run) {
			try {
				Thread.sleep(10);
			} catch (InterruptedException e) {
				// do nothing
			}
			long now = System.currentTimeMillis();
			if ((now / 1000) - (lastTime / 1000) >= 1) {
				listener.update(new Date(now));
				lastTime = now;
			}
		}
	}

	public void stop() {
		this.run = false;
	}

}
}}}

测试，检查记录的时间列表是不是每个时间项目都比前一个增加一秒钟：

{{{class="brush: java"
package thread;

import java.util.Date;

public class Clock implements Runnable {
	private ClockListener listener;
	private boolean run = true;

	public Clock(ClockListener listener) {
		this.listener = listener;
		new Thread(this).start();
	}

	@Override
	public void run() {
		long lastTime = System.currentTimeMillis();
		while (this.run) {
			try {
				Thread.sleep(10);
			} catch (InterruptedException e) {
				// do nothing
			}
			long now = System.currentTimeMillis();
			if ((now / 1000) - (lastTime / 1000) >= 1) {
				listener.update(new Date(now));
				lastTime = now;
			}
		}
	}

	public void stop() {
		this.run = false;
	}

}
}}}



