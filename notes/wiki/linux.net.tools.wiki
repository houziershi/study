%title 网络工具

%toc 网络工具

= netcat =

Netcat或者叫`nc`是Linux下的一个用于调试和检查网络工具包。可用于创建TCP/IP连接，
最大的用途就是用来处理 TCP/UDP 套接字。

这里我们将通过一些实例来学习 netcat 命令。

== 在服务器-客户端架构上使用Netcat ==

netcat 工具可运行于服务器模式，侦听指定端口：

{{{class="brush: bash"
$ nc -l 2389
}}}

然后你可以使用客户端模式来连接到 2389 端口：

{{{class="brush: bash"
$ nc localhost 2389
}}}

现在如果你输入一些文本，它将被发送到服务器端：

{{{class="brush: bash"
$ nc localhost 2389
HI, oschina
}}}

在服务器的终端窗口将会显示下面内容：

{{{class="brush: bash"
$ nc -l 2389
HI, oschina
}}}

== 使用 Netcat 来传输文件 ==

netcat 工具还可用来传输文件，在客户端，假设我们有一个 testfile 文件：

{{{class="brush: bash"
$ cat testfile
hello oschina
}}}

而在服务器端有一个空文件名为 test

然后我们使用如下命令来启用服务器端：

{{{class="brush: bash"
$ nc -l 2389 > test
}}}

紧接着运行客户端：

{{{class="brush: bash"
cat testfile | nc localhost 2389
}}}

然后你停止服务器端，你可以查看 test 内容就是刚才客户端传过来的 testfile 文件的
内容：

{{{class="brush: bash"
$ cat test
hello oschina
}}}

== Netcat 支持超时控制 ==

多数情况我们不希望连接一直保持，那么我们可以使用`-w`参数来指定连接的空闲超时时间
，该参数紧接一个数值，代表秒数，如果连接超过指定时间则连接会被终止。

服务器:

{{{class="brush: bash"
nc -l 2389
}}}

客户端:

{{{class="brush: bash"
$ nc -w 10 localhost 2389
}}}

该连接将在 10 秒后中断。

注意: 不要在服务器端同时使用`-w`和`-l`参数，因为`-w`参数将在服务器端无效果。

== Netcat 支持 IPv6 ==

netcat 的`-4`和`-6`参数用来指定IP地址类型，分别是`IPv4`和`IPv6`：

服务器端：
	
{{{class="brush: bash"
$ nc -4 -l 2389
}}}

客户端：
	
{{{class="brush: bash"
$ nc -4 localhost 2389
}}}

然后我们可以使用`netstat`命令来查看网络的情况：

{{{class="brush: bash"
$ netstat | grep 2389
tcp        0      0 localhost:2389          localhost:50851         ESTABLISHED
tcp        0      0 localhost:50851         localhost:2389          ESTABLISHED
}}}

接下来我们看看IPv6的情况：

服务器端：

{{{class="brush: bash"
$ nc -6 -l 2389
}}}

客户端：
	
{{{class="brush: bash"
$ nc -6 localhost 2389
}}}

再次运行`netstat`命令：

{{{class="brush: bash"
$ netstat | grep 2389
tcp6       0      0 localhost:2389          localhost:33234         ESTABLISHED
tcp6       0      0 localhost:33234         localhost:2389          ESTABLISHED
}}}

前缀是 tcp6 表示使用的是 IPv6 的地址。

== 在Netcat中禁止从标准输入中读取数据 ==

该功能使用`-d`参数，请看下面例子：

服务器端：

{{{class="brush: bash"
$ nc -l 2389
}}}

客户端：

{{{class="brush: bash"
$ nc -d localhost 2389
Hi
}}}

你输入的 Hi 文本并不会送到服务器端。

== 强制 Netcat 服务器端保持启动状态 ==

如果连接到服务器的客户端断开连接，那么服务器端也会跟着退出。

服务器端：

{{{class="brush: bash"
$ nc -l 2389
}}}

客户端：

{{{class="brush: bash"
$ nc localhost 2389
^C
}}}

服务器端：

{{{class="brush: bash"
$ nc -l 2389
$
}}}

上述例子中，但客户端断开时服务器端也立即退出。

我们可以通过`-k`参数来控制让服务器不会因为客户端的断开连接而退出。

服务器端：

{{{class="brush: bash"
$ nc -k -l 2389
}}}

客户端：

{{{class="brush: bash"
$ nc localhost 2389
^C
}}}

服务器端：

{{{class="brush: bash"
$ nc -k -l 2389
}}}

== 配置Netcat客户端不会因为EOF而退出 ==

Netcat客户端可以通过`-q`参数来控制接收到`EOF`后隔多长时间才退出，该参数的单位是
秒：

客户端使用如下方式启动：

{{{class="brush: bash"
nc  -q 5  localhost 2389
}}}

现在如果客户端接收到`EOF`，它将等待5秒后退出。

== 使用 Netcat 来处理 UDP 协议 ==

netcat默认是使用TCP协议，但也支持UDP，可使用`-u`参数来启用UDP协议通讯。

服务器端：

{{{class="brush: bash"
$ nc -4 -u -l 2389
}}}

客户端：

{{{class="brush: bash"
$ nc -4 -u localhost 2389
}}}

这样客户端和服务器端都使用了UDP协议，可通过netstat命令来查看：

{{{class="brush: bash"
$ netstat | grep 2389
udp        0      0 localhost:42634         localhost:2389          ESTABLISHED
}}}





= wget =

下载某个目录以及目录下所有文件：

{{{class="brush: bash"
wget -c -r -np -k -L -p http://www.xxx.com/path/
}}}

以下是一些常用参数：

* `-c` 断点续传
* `-r` 递归下载，下载指定网页某一目录下（包括子目录）的所有文件
* `-nH` 下载时，同时下载跨域的图片或连接
* `-nd` 递归下载时不创建一层一层的目录，把所有的文件下载到当前目录
* `-np` 递归下载时不搜索上层目录，如`wget -c -r www.xxx.org/pub/path/`没有加参数
  `-np`，就会同时下载path的上一级目录pub下的其它文件
* `-k` 将绝对链接转为相对链接，下载整个站点后脱机浏览网页，最好加上这个参数
* `-L` 递归时不进入其它主机，如`wget -c -r www.xxx.org/`如果网站内有一个这样的
  链接`* www.yyy.org`，不加参数`-L`，就会像大火烧山一样，会递归下载www.yyy.org
	网站
* `-p` 下载网页所需的所有文件，如图片等
* `-A` 指定要下载的文件样式列表，多个样式用逗号分隔
* `-i` 后面跟一个文件，文件内指明要下载的URL
