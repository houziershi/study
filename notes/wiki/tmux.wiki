= 线程基础知识 =

你是不是经常需要 SSH 或者 telent 远程登录到 Linux 服务器？你是不是经常为一些
长时间运行的任务而头疼，比如系统备份、ftp 传输等等。通常情况下我们都是为每一个
这样的任务开一个远程终端窗口，因为他们执行的时间太长了。必须等待它执行完毕，
在此期间可不能关掉窗口或者断开连 接，否则这个任务就会被杀掉，一切半途而废了。

让我们来看看为什么关掉窗口/断开连接会使得正在运行的程序死掉。

在Linux/Unix中，有这样几个概念：

进程组（process group）：一个或多个进程的集合，每一个进程组有唯一一个进程组ID，
即进程组长进程的ID。

会话期（session）：一个或多个进程组的集合，有唯一一个会话期首进程（session 
leader）。会话期ID为首进程的ID。

会话期可以有一个单独的控制终端（controlling terminal）。与控制终端连接的会话期
首进程叫做控制进程（controlling process）。当前与终端交互的进程称为前台进程组。
其余进程组称为后台进程组。

== 元凶：SIGHUP 信号 ==

根据POSIX.1定义：

挂断信号（SIGHUP）默认的动作是终止程序。

当终端接口检测到网络连接断开，将挂断信号发送给控制进程（会话期首进程）。

如果会话期首进程终止，则该信号发送到该会话期前台进程组。

一个进程退出导致一个孤儿进程组中产生时，如果任意一个孤儿进程组进程处于STOP状态
，发送SIGHUP和SIGCONT信号到该进程组中所有进程。

因此当网络断开或终端窗口关闭后，控制进程收到SIGHUP信号退出，会导致该会话期内
其他进程退出。

我们来看一个例子。打开两个SSH终端窗口，在其中一个运行`top`命令。

{{{class="brush: bash"
[root@tivf09 root]# top
}}}

在另一个终端窗口，找到top的进程ID为5180，其父进程ID为5128，即登录shell。

{{{class="brush: bash"	
[root@tivf09 root]# ps -ef|grep top
root      5180  5128  0 01:03 pts/0    00:00:02 top
root      5857  3672  0 01:12 pts/2    00:00:00 grep top
}}}

使用`pstree`命令可以更清楚地看到这个关系：

{{{class="brush: bash"	
[root@tivf09 root]# pstree -H 5180|grep top
|-sshd-+-sshd---bash---top
}}}

使用`ps-xj`命令可以看到，登录shell（PID 5128）和top在同一个会话期，shell为会话期
首进程，所在进程组PGID为5128，top所在进程组PGID为5180，为前台进程组。

{{{class="brush: bash"	
[root@tivf09 root]# ps -xj|grep 5128
 5126  5128  5128  5128 pts/0     5180 S        0   0:00 -bash
 5128  5180  5180  5128 pts/0     5180 S        0   0:50 top
 3672 18095 18094  3672 pts/2    18094 S        0   0:00 grep 5128
}}}

关闭第一个SSH窗口，在另一个窗口中可以看到top也被杀掉了。

{{{class="brush: bash"	
[root@tivf09 root]# ps -ef|grep 5128
root     18699  3672  0 04:35 pts/2    00:00:00 grep 5128
}}}

如果我们可以忽略SIGHUP信号，关掉窗口应该就不会影响程序的运行了。`nohup`命令可以
达到这个目的，如果程序的标 准输出/标准错误是终端，nohup默认将其重定向到
`nohup.out`文件。值得注意的是nohup命令只是使得程序忽略SIGHUP信号，还需要使用
标记`&`把它放在后台运行。

{{{class="brush: bash"	
nohup <command> [argument…] &
}}}

虽然nohup很容易使用，但还是比较“简陋”的，对于简单的命令能够应付过来，对于复杂
的需要人机交互的任务就麻烦了。

 
= tmux操作基础 =

安装过程中可能会有路径没有建立导致无法启动，看一下是缺少哪些路径：

{{{class="brush: bash"
strace -e trace=file tmux ..restofyourcommand...
}}}

手动把少掉的路径建起来就可以了。

在控制台中执行下面的各项tmux命令。

* `Ctrl+b`激活控制台；

 
= server 服务器 =

输入tmux命令时就开启了一个服务器。

 
= session 会话 =


一个服务器可以包含多个会话。管理tmux会话：

{{{class="brush: bash"
$ tmux at   # attach running sessions to a terminal
$ tmux ls   # list running tmux sessions
$ exit      # close tmux session
}}}

在多个终端中共用一个会话：

{{{class="brush: bash"	
$ tmux new -s session_name # make new named session
$ tmux at -t session_name  # attach to exist session (allowing shared sessions)
$ tmux kill-session -t session_name  # kill named session
}}}

在控制台中：

* `d`脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话
* `D`选择要脱离的会话；在同时开启了多个会话时使用
* `Ctrl+z`挂起当前会话
* `r`强制重绘未脱离的会话
* `s`选择并切换会话；在同时开启了多个会话时使用
 
= window    窗口 =

一个会话可以包含多个窗口。

* `c` 创建新窗口
* `&`关闭当前窗口
* `p/n`切换至上／下一窗口
* `0-9`切换至指定窗口
* `l`在前后两个窗口间互相切换
* `w`通过窗口列表切换窗口
* `,`重命名当前窗口；这样便于识别
* `.`修改当前窗口编号；相当于窗口重新排序
* `f`在所有窗口中查找指定文本
* `pane`面板。

= 面版 pane =

一个窗口可以包含多个面板。

* `”`将当前面板平分为上下两块
* `%`将当前面板平分为左右两块
* `x`关闭当前面板
* `!`将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板
* `Ctrl+方向键`以1个单元格为单位移动边缘以调整当前面板大小
* `Alt+方向键`以5个单元格为单位移动边缘以调整当前面板大小
* `方向键`切换窗口
* `Space`在预置的面板布局中循环切换；依次包括`even-horizontal`、`even-vertical`、`main-horizontal`、`main-vertical`、`tiled`
* `q`显示面板编号
* `o`在当前窗口中选择下一面板
* `方向键`移动光标以选择面板
* `{`向前置换当前面板
* `}`向后置换当前面板
* `Alt+o`逆时针旋转当前窗口的面板
* `Ctrl+o`顺时针旋转当前窗口的面板

 
= 复制粘贴 =  

* `[`进入复制模式；
* `q`/`Esc`退出
* `CTRL-SPACE`或`CTRL-@`开始选择文本
* `ALT-w`复制内容
* `]`粘贴复制的内容

= 系统操作 =   

* `?`列出所有快捷键；按q返回
* `:`进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器
* `~`列出提示信息缓存；其中包含了之前tmux返回的各种提示信息
