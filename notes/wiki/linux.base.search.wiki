
%title 查找

%toc 查找

= whereis =

`whereis`的作用是用来定位命令的二进制文件、资源或者帮助页。举例来说，获得`ls`和
`kill`命令的二进制文件/资源以及帮助页：
	
{{{class="brush: bash"
root@tecmint:~# whereis ls
ls: /bin/ls /usr/share/man/man1/ls.1.gz

root@tecmint:~# whereis kill
kill: /bin/kill /usr/share/man/man2/kill.2.gz /usr/share/man/man1/kill.1.gz
}}}

注意：当需要知道二进制文件保存位置时有用。

= find =

{{{class="brush: bash"
find / -name "*.conf" | xargs grep "alias" 
}}}

搜索指定目录下的文件，从开始于父目录，然后搜索子目录。

{{{class="brush: bash"
root@tecmint:~# find -name *.sh
 
./Desktop/load.sh
./Desktop/test.sh
./Desktop/shutdown.sh
./Binary/firefox/run-mozilla.sh
./Downloads/kdewebdev-3.5.8/quanta/scripts/externalpreview.sh
./Downloads/kdewebdev-3.5.8/admin/doxygen.sh
./Downloads/kdewebdev-3.5.8/admin/cvs.sh
./Downloads/kdewebdev-3.5.8/admin/ltmain.sh
./Downloads/wheezy-nv-install.sh
}}}

注意： `-name`选项是搜索大小写敏感。可以使用`-iname`选项，这样在搜索中可以忽略
大小写。（`*`是通配符，可以搜索所有的文件；`.sh`你可以使用文件名或者文件名的一
部分来制定输出结果）

{{{class="brush: bash"
root@tecmint:~# find -iname *.SH ( find -iname *.Sh /  find -iname *.sH)
 
./Desktop/load.sh
./Desktop/test.sh
./Desktop/shutdown.sh
./Binary/firefox/run-mozilla.sh
./Downloads/kdewebdev-3.5.8/quanta/scripts/externalpreview.sh
./Downloads/kdewebdev-3.5.8/admin/doxygen.sh
./Downloads/kdewebdev-3.5.8/admin/cvs.sh
./Downloads/kdewebdev-3.5.8/admin/ltmain.sh
./Downloads/wheezy-nv-install.sh

root@tecmint:~# find -name *.tar.gz
 
/var/www/modules/update/tests/aaa_update_test.tar.gz
./var/cache/flashplugin-nonfree/install_flash_player_11_linux.i386.tar.gz
./home/server/Downloads/drupal-7.22.tar.gz
./home/server/Downloads/smtp-7.x-1.0.tar.gz
./home/server/Downloads/noreqnewpass-7.x-1.2.tar.gz
./usr/share/gettext/archive.git.tar.gz
./usr/share/doc/apg/php.tar.gz
./usr/share/doc/festival/examples/speech_pm_1.0.tar.gz
./usr/share/doc/argyll/examples/spyder2.tar.gz
./usr/share/usb_modeswitch/configPack.tar.gz
}}}

注意：以上命令查找根目录下和所有文件夹以及加载的设备的子目录下的所有包含`tar.gz`
的文件。

== Basic Find Commands for Finding Files with Names ==

=== Find Files Using Name in Current Directory ===

Find all the files whose name is tecmint.txt in a current working directory.

{{{class="brush: bash"
# find . -name tecmint.txt

./tecmint.txt
}}}

=== Find Files Under Home Directory ===

Find all the files under `/home` directory with name `tecmint.txt`.

{{{class="brush: bash"
# find /home -name tecmint.txt

/home/tecmint.txt
}}}

=== Find Files Using Name and Ignoring Case ===

Find all the files whose name is `tecmint.txt` and contains both capital and 
small letters in `/home` directory.

{{{class="brush: bash"
# find /home -iname tecmint.txt

./tecmint.txt
./Tecmint.txt
}}}

=== Find Directories Using Name ===

Find all directories whose name is `Tecmint` in `/` directory.

{{{class="brush: bash"
# find / -type d -name Tecmint

/Tecmint
}}}

=== Find PHP Files Using Name ===

Find all php files whose name is `tecmint.php` in a current working directory.

{{{class="brush: bash"
# find . -type f -name tecmint.php

./tecmint.php
}}}

=== Find all PHP Files in Directory ===

Find all php files in a directory.

{{{class="brush: bash"
# find . -type f -name "*.php"

./tecmint.php
./login.php
./index.php
}}}

== Find Files Based on their Permissions ==

=== Find Files With `777` Permissions ===

Find all the files whose permissions are `777`.

{{{class="brush: bash"
# find . -type f -perm 0777 -print
}}}

=== Find Files Without 777 Permissions ===

Find all the files without permission `777`.

{{{class="brush: bash"
# find / -type f ! -perm 777
}}}

=== Find SGID Files with 644 Permissions ===

Find all the SGID bit files whose permissions set to `644`.

{{{class="brush: bash"
# find / -perm 2644
}}}

=== Find Sticky Bit Files with 551 Permissions ===

Find all the Sticky Bit set files whose permission are `551`.

{{{class="brush: bash"
# find / -perm 1551
}}}

=== Find SUID Files ===

Find all SUID set files.

{{{class="brush: bash"
# find / -perm /u=s
}}}

=== Find SGID Files ===

Find all SGID set files.

{{{class="brush: bash"
# find / -perm /g+s
}}}

=== Find Read Only Files ===

Find all Read Only files.

{{{class="brush: bash"
# find / -perm /u=r
}}}

=== Find Executable Files ===

Find all Executable files.

{{{class="brush: bash"
# find / -perm /a=x
}}}

=== Find Files with 777 Permissions and Chmod to 644 ===

Find all `777` permission files and use chmod command to set permissions to 
`644`.

{{{class="brush: bash"
# find / -type f -perm 0777 -print -exec chmod 644 {} \;
}}}

=== Find Directories with 777 Permissions and Chmod to 755 ===

Find all `777` permission directories and use chmod command to set permissions 
to `755`.

{{{class="brush: bash"
# find / -type d -perm 777 -print -exec chmod 755 {} \;
}}}

=== Find and remove single File ===

To find a single file called `tecmint.txt` and remove it.

{{{class="brush: bash"
# find . -type f -name "tecmint.txt" -exec rm -f {} \;
}}}

=== Find and remove Multiple File ===

To find and remove multiple files such as `.mp3` or `.txt`, then use.

{{{class="brush: bash"
# find . -type f -name "*.txt" -exec rm -f {} \;
}}}

OR

{{{class="brush: bash"
# find . -type f -name "*.mp3" -exec rm -f {} \;
}}}

=== Find all Empty Files ===

To file all empty files under certain path.

{{{class="brush: bash"
# find /tmp -type f -empty
}}}

=== Find all Empty Directories ===

To file all empty directories under certain path.

{{{class="brush: bash"
# find /tmp -type d -empty
}}}

=== File all Hidden Files ===

To find all hidden files, use below command.

{{{class="brush: bash"
# find /tmp -type f -name ".*"
}}}

== Search Files Based On Owners and Groups ==

=== Find Single File Based on User ===

To find all or single file called `tecmint.txt` under `/` root directory of 
owner root.

{{{class="brush: bash"
# find / -user root -name tecmint.txt
}}}

=== Find all Files Based on User ===

To find all files that belongs to user Tecmint under `/home` directory.

{{{class="brush: bash"
# find /home -user tecmint
}}}

=== Find all Files Based on Group ===

To find all files that belongs to group Developer under `/home` directory.

{{{class="brush: bash"
# find /home -group developer
}}}

=== Find Particular Files of User ===

To find all `.txt` files of user Tecmint under `/home` directory.

{{{class="brush: bash"
# find /home -user tecmint -iname "*.txt"
}}}


== Find Files and Directories Based on Date and Time ==

=== Find Last 50 Days Modified Files ===

To find all the files which are modified 50 days back.

{{{class="brush: bash"
# find / -mtime 50
}}}

=== Find Last 50 Days Accessed Files ===

To find all the files which are accessed 50 days back.

{{{class="brush: bash"
# find / -atime 50
}}}

=== Find Last 50-100 Days Modified Files ===

To find all the files which are modified more than 50 days back and less than 
100 days.

{{{class="brush: bash"
# find / -mtime +50 –mtime -100
}}}

=== Find Changed Files in Last 1 Hour ===

To find all the files which are changed in last 1 hour.

{{{class="brush: bash"
# find / -cmin -60
}}}

=== Find Modified Files in Last 1 Hour ===

To find all the files which are modified in last 1 hour.

{{{class="brush: bash"
# find / -mmin -60
}}}

=== Find Accessed Files in Last 1 Hour ===

To find all the files which are accessed in last 1 hour.

{{{class="brush: bash"
# find / -amin -60
}}}

== Find Files and Directories Based on Size ==

=== Find 50MB Files ===

To find all 50MB files, use.

{{{class="brush: bash"
# find / -size 50M
}}}

=== Find Size between 50MB – 100MB ===

To find all the files which are greater than 50MB and less than 100MB.

{{{class="brush: bash"
# find / -size +50M -size -100M
}}}

=== Find and Delete 100MB Files ===

To find all 100MB files and delete them using one single command.

{{{class="brush: bash"
# find / -size +100M -exec rm -rf {} \;
}}}

=== Find Specific Files and Delete ===

Find all `.mp3` files with more than `10MB` and delete them using one single 
command.

{{{class="brush: bash"
# find / -type f -name *.mp3 -size +10M -exec ls -l {} \;
}}}

== 另一套例子 ==

首先，在你的`home`目录下面创建下面的空文件，来测试下面的`find`命令示例：

{{{class="brush: bash" title="create_sample_files.sh"
touch mycprogram.c
touch MyCProgram.c
touch Program.c

mkdir backup
cd backup

touch MybashProgram.sh
touch mycprogram.c
touch MyCProgram.c
touch Program.c
}}}

然后执行：

{{{class="brush: bash"
chmod +x create_sample_files.sh
./create_sample_files.sh
}}}


=== 用文件名查找文件 ===

用`MyCProgram.c`作为查找名在当前目录及其子目录中查找文件的方法。

{{{class="brush: bash"
# find -name "MyCProgram.c"
./backup/MyCProgram.c
./MyCProgram.c
}}}


=== 用文件名查找文件，忽略大小写 ===

用`MyCProgram.c`作为查找名在当前目录及其子目录中查找文件的方法，忽略了大小写。

{{{class="brush: bash"
# find -iname "MyCProgram.c"
./mycprogram.c
./backup/mycprogram.c
./backup/MyCProgram.c
./MyCProgram.c
}}}

=== 限定搜索指定目录的深度 ===

使用`mindepth`和`maxdepth`限定搜索指定目录的深度。

在`root`目录及其子目录下查找`passwd`文件。

{{{class="brush: bash"
# find / -name passwd
./usr/share/doc/nss_ldap-253/pam.d/passwd
./usr/bin/passwd
./etc/pam.d/passwd
./etc/passwd
}}}


在`root`目录及其1层深的子目录中查找`passwd`. (例如root — level 1, and one 
sub-directory — level 2)

{{{class="brush: bash"
# find -maxdepth 2 -name passwd
./etc/passwd
}}}

在`root`目录下及其最大两层深度的子目录中查找`passwd`文件. (例如 root — level 1, 
and two sub-directories — level 2 and 3 )

{{{class="brush: bash"
# find / -maxdepth 3 -name passwd
./usr/bin/passwd
./etc/pam.d/passwd
./etc/passwd
}}}

在第二层子目录和第四层子目录之间查找`passwd`文件。

{{{class="brush: bash"
# find / -maxdepth 3 -name passwd
# find -mindepth 3 -maxdepth 5 -name passwd
./usr/bin/passwd
./etc/pam.d/passwd
}}}


=== 在查找到的文件上执行命令 ===

下面的例子展示了`find`命令来计算所有不区分大小写的文件名为`MyCProgram.c`的文件的
MD5验证和。

* `{}`将会被当前文件名取代。
* 那个`\`好像是类似转义用的，
	- 后面加上`;`表示命令会执行多次，每次后面都加上找到的一个文件。
	- 后面加上`+`，表示只会执行一次命令，执行的时候把所有找到的文件一次性传给它。

{{{class="brush: bash"
# find -iname "MyCProgram.c" -exec md5sum {} \;
d41d8cd98f00b204e9800998ecf8427e  ./mycprogram.c
d41d8cd98f00b204e9800998ecf8427e  ./backup/mycprogram.c
d41d8cd98f00b204e9800998ecf8427e  ./backup/MyCProgram.c
d41d8cd98f00b204e9800998ecf8427e  ./MyCProgram.c
}}}


=== 相反匹配 ===

显示所有的名字不是`MyCProgram.c`的文件或者目录。由于`maxdepth`是1，所以只会显示
当前目录下的文件和目录。

{{{class="brush: bash"
# find -maxdepth 1 -not -iname "MyCProgram.c"
.
./MybashProgram.sh
./create_sample_files.sh
./backup
./Program.c
}}}


=== 使用inode编号查找文件 ===

任何一个文件都有一个独一无二的`inode`编号，借此我们可以区分文件。创建两个名字
相似的文件，例如一个有空格结尾，一个没有。

{{{class="brush: bash"
# touch "test-file-name"

# touch "test-file-name "
[Note: There is a space at the end]

# ls -1 test*
test-file-name
test-file-name
}}}

从`ls`的输出不能区分哪个文件有空格结尾。使用选项`-i`，可以看到文件的`inode`编号
，借此可以区分这两个文件。

{{{class="brush: bash"
# ls -i1 test*
16187429 test-file-name
16187430 test-file-name
}}}

你可以如下面所示在`find`命令中指定`inode`编号。在此，`find`命令用`inode`编号
重命名了一个文件。

{{{class="brush: bash"
# find -inum 16187430 -exec mv {} new-test-file-name \;

# ls -i1 *test*
16187430 new-test-file-name
16187429 test-file-name
}}}


你可以在你想对那些像上面一样的糟糕命名的文件做某些操作时使用这一技术。例如，名为
`file?.txt`的文件名字中有一个特殊字符。若你想执行`rm file?.txt`，下面所示的所有
三个文件都会被删除。所以，采用下面的步骤来删除`file?.txt`文件。

{{{class="brush: bash"
# ls
file1.txt  file2.txt  file?.txt
}}}

找到每一个文件的`inode`编号。

{{{class="brush: bash"
# ls -i1
804178 file1.txt
804179 file2.txt
804180 file?.txt
}}}

如下所示： 使用`inode`编号来删除那些具有特殊符号的文件名。

{{{class="brush: bash"
# find -inum 804180 -exec rm {} \;

# ls
file1.txt  file2.txt
[Note: The file with name "file?.txt" is now removed]
}}}


=== 根据文件权限查找文件 ===

下面的操作时合理的：

* 找到具有指定权限的文件
* 忽略其他权限位，检查是否和指定权限匹配
* 根据给定的八进制/符号表达的权限搜索

此例中，假设目录包含以下文件。注意这些文件的权限不同。

{{{class="brush: bash"
# ls -l
total 0
-rwxrwxrwx 1 root root 0 2009-02-19 20:31 all_for_all
-rw-r--r-- 1 root root 0 2009-02-19 20:30 everybody_read
---------- 1 root root 0 2009-02-19 20:31 no_for_all
-rw------- 1 root root 0 2009-02-19 20:29 ordinary_file
-rw-r----- 1 root root 0 2009-02-19 20:27 others_can_also_read
----r----- 1 root root 0 2009-02-19 20:27 others_can_only_read
}}}

找到具有组读权限的文件。使用下面的命令来找到当前目录下对同组用户具有读权限的文件
，忽略该文件的其他权限。

{{{class="brush: bash"
# find . -perm -g=r -type f -exec ls -l {} \;
-rw-r--r-- 1 root root 0 2009-02-19 20:30 ./everybody_read
-rwxrwxrwx 1 root root 0 2009-02-19 20:31 ./all_for_all
----r----- 1 root root 0 2009-02-19 20:27 ./others_can_only_read
-rw-r----- 1 root root 0 2009-02-19 20:27 ./others_can_also_read
}}}

找到对组用户具有只读权限的文件。

{{{class="brush: bash"
# find . -perm g=r -type f -exec ls -l {} \;
----r----- 1 root root 0 2009-02-19 20:27 ./others_can_only_read
}}}

找到对组用户具有只读权限的文件(使用八进制权限形式)。

{{{class="brush: bash"
# find . -perm 040 -type f -exec ls -l {} \;
----r----- 1 root root 0 2009-02-19 20:27 ./others_can_only_read
}}}


=== 找到目录及子目录下所有空文件 ===

找到`home`目录及子目录下所有的空文件(0字节文件)

下面命令的输出文件绝大多数都是锁定文件盒其他程序创建的place hoders

{{{class="brush: bash"
# find ~ -empty
}}}

只列出你`home`目录里的空文件。

{{{class="brush: bash"
# find . -maxdepth 1 -empty
}}}

只列出当前目录下的非隐藏空文件。

{{{class="brush: bash"
# find . -maxdepth 1 -empty -not -name ".*"
}}}


=== 查找最大的文件 ===

查找5个最大的文件

下面的命令列出当前目录及子目录下的5个最大的文件。这会需要一点时间，取决于命令
需要处理的文件数量。

{{{class="brush: bash"
# find . -type f -exec ls -s {} \; | sort -n -r | head -5
}}}


=== 查找最小的文件 ===

查找5个最小的文件

方法同查找5个最大的文件类似，区别只是sort的顺序是降序。

{{{class="brush: bash"
# find . -type f -exec ls -s {} \; | sort -n  | head -5
}}}

上面的命令中，很可能你看到的只是空文件(0字节文件)。如此，你可以使用下面的命令
列出最小的文件，而不是0字节文件。

{{{class="brush: bash"
# find . -not -empty -type f -exec ls -s {} \; | sort -n  | head -5
}}}


=== 查找指定文件类型的文件 ===

使用`-type`查找指定文件类型的文件

只查找socket文件

{{{class="brush: bash"
# find . -type s
}}}

查找所有的目录

{{{class="brush: bash"
# find . -type d
}}}

查找所有的一般文件

{{{class="brush: bash"
# find . -type f
}}}

查找所有的隐藏文件

{{{class="brush: bash"
# find . -type f -name ".*"
}}}

查找所有的隐藏目录

{{{class="brush: bash"
# find -type d -name ".*"
}}}


=== 通过和其他文件比较修改时间查找文件 ===

显示在指定文件之后做出修改的文件。下面的`find`命令将显示所有的在`ordinary_file`
之后创建修改的文件。

{{{class="brush: bash"
# ls -lrt
total 0
-rw-r----- 1 root root 0 2009-02-19 20:27 others_can_also_read
----r----- 1 root root 0 2009-02-19 20:27 others_can_only_read
-rw------- 1 root root 0 2009-02-19 20:29 ordinary_file
-rw-r--r-- 1 root root 0 2009-02-19 20:30 everybody_read
-rwxrwxrwx 1 root root 0 2009-02-19 20:31 all_for_all
---------- 1 root root 0 2009-02-19 20:31 no_for_all
}}}

{{{class="brush: bash"
# find -newer ordinary_file
.
./everybody_read
./all_for_all
./no_for_all
}}}

=== 通过文件大小查找文件 ===

使用`-size`选项可以通过文件大小查找文件。`– `指比给定尺寸小，`+`指比给定尺寸大。
没有符号代表和给定尺寸完全一样大。

查找比指定文件大的文件

{{{class="brush: bash"
# find ~ -size +100M
}}}

查找比指定文件小的文件

{{{class="brush: bash"
# find ~ -size -100M
}}}

查找符合给定大小的文件

{{{class="brush: bash"
# find ~ -size 100M
}}}


=== 给常用find操作取别名 ===

若你发现有些东西很有用，你可以给他取别名。并且在任何你希望的地方执行。

常用的删除`a.out`文件。

{{{class="brush: bash"
# alias rmao="find . -iname a.out -exec rm {} \;"
# rmao
}}}

删除c程序产生的`core`文件。

{{{class="brush: bash"
# alias rmc="find . -iname core -exec rm {} \;"
# rmc
}}}


=== 删除大型打包文件 ===

下面的命令删除大于`100M`的`*.zip`文件。

{{{class="brush: bash"
# find / -type f -name *.zip -size +100M -exec rm -i {} \;"
}}}

用别名`rm100m`删除所有大于100M的`*.tar`文件。使用同样的思想可以创建`rm1g`,`rm2g`
,`rm5g`的一类别名来删除所有大于1G,2G,5G的文件。

{{{class="brush: bash"
# alias rm100m="find / -type f -name *.tar -size +100M -exec rm -i {} \;"
# alias rm1g="find / -type f -name *.tar -size +1G -exec rm -i {} \;"
# alias rm2g="find / -type f -name *.tar -size +2G -exec rm -i {} \;"
# alias rm5g="find / -type f -name *.tar -size +5G -exec rm -i {} \;"

# rm100m
# rm1g
# rm2g
# rm5g
}}}


= grep =

`grep`命令搜索指定文件中包含给定字符串或者单词的行。举例搜索`/etc/passwd`文件中
的`tecmint`

{{{class="brush: bash"
root@tecmint:~# grep tecmint /etc/passwd
 
tecmint:x:1000:1000:Tecmint,,,:/home/tecmint:/bin/bash
}}}

使用`-i`选项将忽略大小写。

{{{class="brush: bash"
root@tecmint:~# grep -i TECMINT /etc/passwd
 
tecmint:x:1000:1000:Tecmint,,,:/home/tecmint:/bin/bash
}}}

使用`-r`选项递归搜索所有自目录下包含字符串`127.0.0.1`的行。

{{{class="brush: bash"
root@tecmint:~# grep -r "127.0.0.1" /etc/
 
/etc/vlc/lua/http/.hosts:127.0.0.1
/etc/speech-dispatcher/modules/ivona.conf:#IvonaServerHost "127.0.0.1"
/etc/mysql/my.cnf:bind-address      = 127.0.0.1
/etc/apache2/mods-available/status.conf:    Allow from 127.0.0.1 ::1
/etc/apache2/mods-available/ldap.conf:    Allow from 127.0.0.1 ::1
/etc/apache2/mods-available/info.conf:    Allow from 127.0.0.1 ::1
/etc/apache2/mods-available/proxy_balancer.conf:#    Allow from 127.0.0.1 ::1
/etc/security/access.conf:#+ : root : 127.0.0.1
/etc/dhcp/dhclient.conf:#prepend domain-name-servers 127.0.0.1;
/etc/dhcp/dhclient.conf:#  option domain-name-servers 127.0.0.1;
/etc/init/network-interface.conf:   ifconfig lo 127.0.0.1 up || true
/etc/java-6-openjdk/net.properties:# localhost & 127.0.0.1).
/etc/java-6-openjdk/net.properties:# http.nonProxyHosts=localhost|127.0.0.1
/etc/java-6-openjdk/net.properties:# localhost & 127.0.0.1).
/etc/java-6-openjdk/net.properties:# ftp.nonProxyHosts=localhost|127.0.0.1
/etc/hosts:127.0.0.1    localhost
}}}

注意：您还可以使用以下选项：

* `-w`搜索单词 (`egrep -w ‘word1|word2‘ /path/to/file`).
* `-c`用于统计满足要求的行 (`grep -c ‘word‘ /path/to/file`).
* `–color`彩色输出 (`grep –color server /etc/passwd`).

{{{class="brush: bash"
}}}


{{{class="brush: bash"
}}}


{{{class="brush: bash"
}}}


{{{class="brush: bash"
}}}


{{{class="brush: bash"
}}}


{{{class="brush: bash"
}}}


{{{class="brush: bash"
}}}

